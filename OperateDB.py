#coding:utf-8# -*- coding: UTF-8 -*-# @Time : 2019/01/06# @Author : litao# @File : OperateDB.py version3#更改记录：/QdSoftListDb/GetItem/ 增加表列项distributor_list#20200106 /QdSoftListDb/Image/ 增加接口用于上传图片'''更新至Python3'''import osimport sqlite3import jsonimport tornado.escapeimport tornado.ioloopimport tornado.webfrom tornado.options import define, options, parse_command_linefrom tornado.web import RequestHandlerimport loggingimport timeimport uuiddefine("port", default=8000, help="run on the given port", type=int)base_dir = os.path.abspath(os.path.join(os.getcwd(),'..'))filepath = base_dir+'\\Python\\sqlitedb\\QdSoftListDb.db'logopath = base_dir+'\\nginx-1.0.11\\nginx-1.0.11\\html\\logoimage\\'dataDBPath = base_dir + '\\nginx-1.0.11\\nginx-1.0.11\\html\\'if (not os.path.exists(logopath)):    os.makedirs(logopath)class DbDataBase(object):    def __init__(self, filepath):        self.path = filepath        self.createdbfile()    def createdbfile(self):        conn = sqlite3.connect(self.path)        cur = conn.cursor()        cur.execute('''CREATE TABLE IF NOT EXISTS quickdraw_software_list                           (ID INTEGER  PRIMARY KEY AUTOINCREMENT unique,                           factoryid      CHAR(50),                           config_data    TEXT,                           distributor_list TEXT);''')        cur.execute('''CREATE TABLE IF NOT EXISTS quickdraw_orderno_algorithm                           (ID INTEGER  PRIMARY KEY AUTOINCREMENT unique,                           algorithm      TEXT,                           base           CHAR(255),                           memo    TEXT);''')        conn.commit()        conn.close()    def additem(self, factoryid, config_data,distributor_list, title, logo):        sqlpart = "(factoryid, config_data, distributor_list, title, logo) VALUES (?, ?, ?, ?, ?)"        data = (factoryid, config_data,distributor_list, title, logo)        sql = "INSERT INTO quickdraw_software_list " + sqlpart + ";"        conn = sqlite3.connect(self.path)        cur = conn.cursor()        cur.execute(sql, data)        conn.commit()        conn.close()    def finditem(self, factoryid, sql):        if factoryid=='*':            Alldata = self.returnitems() #Alldata or state            return Alldata        conn = sqlite3.connect(self.path)        cur = conn.cursor()        cur.execute(sql)        alldatalist = cur.fetchall()        conn.commit()        conn.close()        Result = None        if len(alldatalist) >= 1:            return alldatalist        else:            pass        return Result    def getitem(self, factoryid):        sql = "select * from quickdraw_software_list where factoryid = '%s' "%(factoryid)        conn = sqlite3.connect(self.path)        cur = conn.cursor()        cur.execute(sql)        alldatalist = cur.fetchall()        conn.commit()        conn.close()        Result = None        if len(alldatalist) >= 1:            return alldatalist[0]        else:            pass        return Result    def deleteitem(self, ID):        sql = "DELETE FROM  quickdraw_software_list where ID =%d" % (ID)        conn = sqlite3.connect(self.path)        cur = conn.cursor()        checksql = "select * from quickdraw_software_list where ID =%d " % (ID)        cur.execute(checksql)        alldatalist = cur.fetchall()        conn.commit()        if alldatalist == []:            conn.close()            return None        cur.execute(sql)        conn.commit()        conn.close()        return 1    def changeitem(self, ID, data):        mykeys = list(data.keys())        if mykeys[0] =='config_data':            data[mykeys[0]] = json.dumps(data[mykeys[0]],ensure_ascii=False).replace("'", '"')        sql = "UPDATE quickdraw_software_list SET '%s' = '%s' " % (mykeys[0], data[mykeys[0]])        for i in range(1,len(mykeys)):            key = mykeys[i]            if key == 'config_data': data[key] = json.dumps(data[key],ensure_ascii=False).replace("'", '"')            sql =sql + ",'%s' = '%s'" % (key, data[key])        sql= sql + "where id =%d"% (ID)        print(sql)        conn = sqlite3.connect(self.path)        cur = conn.cursor()        checksql = "select * from quickdraw_software_list where ID =%d " % (ID)        cur.execute(checksql)        alldatalist = cur.fetchall()        conn.commit()        if alldatalist == []:            conn.close()            return None        cur.execute(sql)        conn.commit()        conn.close()        return 1    def changefactoryiditem(self, ID, factoryid):        sql = "UPDATE quickdraw_software_list SET factoryid = '%s' where id =%d" % (factoryid, ID)        conn = sqlite3.connect(self.path)        cur = conn.cursor()        checksql = "select * from quickdraw_software_list where ID =%d " % (ID)        cur.execute(checksql)        alldatalist = cur.fetchall()        conn.commit()        if alldatalist == []:            conn.close()            return None        cur.execute(sql)        conn.commit()        conn.close()        return 1    def changelogoitem(self, ID, logo):        sql = "UPDATE quickdraw_software_list SET logo = '%s' where id =%d" % (logo, ID)        conn = sqlite3.connect(self.path)        cur = conn.cursor()        checksql = "select * from quickdraw_software_list where ID =%d " % (ID)        cur.execute(checksql)        alldatalist = cur.fetchall()        conn.commit()        if alldatalist == []:            conn.close()            return None        cur.execute(sql)        conn.commit()        conn.close()        return 1    def changeconfig_dataitem(self, ID, config_data):        sql = "UPDATE quickdraw_software_list SET config_data = '%s' where id =%d" % (config_data, ID)        conn = sqlite3.connect(self.path)        cur = conn.cursor()        checksql = "select * from quickdraw_software_list where ID =%d " % (ID)        cur.execute(checksql)        alldatalist = cur.fetchall()        conn.commit()        if alldatalist == []:            conn.close()            return None        cur.execute(sql)        conn.commit()        conn.close()        return 1    def returnitems(self):        conn = sqlite3.connect(self.path)        cur = conn.cursor()        sql = "select * from quickdraw_software_list"        cur.execute(sql)        alldatalist = cur.fetchall()        conn.commit()        if alldatalist == []:            conn.close()            return None        else:            return alldatalist        conn.close()    def editalg(self, ID, **kwargs):        algorithm = kwargs.get('algorithm',None)        base = kwargs.get('base',None)        memo = kwargs.get('memo',None)        sql = ''        if algorithm:            sql = "UPDATE quickdraw_orderno_algorithm SET algorithm = '%s' where id =%d" % (algorithm, ID)        if base:            sql = "UPDATE quickdraw_orderno_algorithm SET base = '%s' where id =%d" % (base, ID)        if memo:            sql = "UPDATE quickdraw_orderno_algorithm SET memo = '%s' where id =%d" % (memo, ID)        if algorithm and base:            sql = "UPDATE quickdraw_orderno_algorithm SET algorithm = '%s', base = '%s' where id =%d" % (algorithm, base, ID)        if memo and base:            sql = "UPDATE quickdraw_orderno_algorithm SET memo = '%s', base = '%s' where id =%d" % (memo, base, ID)        if algorithm and memo:            sql = "UPDATE quickdraw_orderno_algorithm SET algorithm = '%s', memo = '%s' where id =%d" % (algorithm, memo, ID)        if (algorithm or algorithm=="") and (memo or memo=="") and (base or base==""):            sql = "UPDATE quickdraw_orderno_algorithm SET algorithm = '%s', memo = '%s', base = '%s' where id =%d" % (algorithm, memo, base, ID)        if sql == '':            return None        conn = sqlite3.connect(self.path)        cur = conn.cursor()        cur.execute(sql)        conn.commit()        conn.close()        return 1class BaseHandler(RequestHandler):    def set_default_headers(self):        self.set_header("Access-Control-Allow-Origin", "*")        self.set_header("Access-Control-Allow-Headers",                        "x-requested-with,access_token")  # 这里要填写上请求带过来的Access-Control-Allow-Headers参数，如access_token就是我请求带过来的参数        self.set_header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE")  # 请求允许的方法        self.set_header("Access-Control-Max-Age", "3600")  # 用来指定本次预检请求的有效期，单位为秒，，在此期间不用发出另一条预检请求。    # 定义一个响应OPTIONS 请求，不用作任务处理    def options(self):        passclass AddItem(BaseHandler):    def post(self):        factoryid = self.get_argument('factoryid', None)        configdata = self.get_argument('configdata', '')        title = self.get_argument('title', '')        logo = self.get_argument('logo', '')        distributor_list = self.get_argument('distributors', '')        if factoryid:            factoryid = factoryid            QdSoftListDb = DbDataBase(filepath)            QdSoftListDb.additem(factoryid,configdata,distributor_list,title,logo)            Res = {'result':1}            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'factoryid is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class DeleteItem(BaseHandler):    def post(self):        ID = self.get_argument('id', None)        if ID:            ID = int(ID)            QdSoftListDb = DbDataBase(filepath)            state = QdSoftListDb.deleteitem(ID)            if state:                Res = {'result':1}                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))            else:                Res = {'result': -1}                Res['error'] = 'id is not exist!'                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'id is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class FindItem(BaseHandler):    def post(self):        factoryid = self.get_argument('factoryid', None)        if factoryid:            factoryid = factoryid            QdSoftListDb = DbDataBase(filepath)            sql = "select * from quickdraw_software_list where factoryid like '%%%s%%' " % (factoryid)            alldatalist = QdSoftListDb.finditem(factoryid, sql)            if alldatalist:                Res = {'datalist':alldatalist}                Res['result'] = 1                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))            else:                Res = {'result': 0}                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'factoryid is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class SearchAlgItem(BaseHandler):    def post(self):        ID = self.get_argument('id', None)        print ('456')        if ID:            ID = int(ID)            QdSoftListDb = DbDataBase(filepath)            sql = "select * from quickdraw_orderno_algorithm where id =%d" % (ID)            alldatalist = QdSoftListDb.finditem(ID, sql)            if alldatalist:                Res = {'datalist':alldatalist}                Res['result'] = 1                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))            else:                Res = {'result': 0}                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'id is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class GetItem(BaseHandler):    def get(self):        factoryid = self.get_argument('factoryid', None)        if factoryid:            factoryid = factoryid            QdSoftListDb = DbDataBase(filepath)            alldatalist = QdSoftListDb.getitem(factoryid)            if alldatalist:                Res = {'id':alldatalist[0], 'factoryid':alldatalist[1],                       'config_data':alldatalist[2], 'distributor_list':alldatalist[3],                       'logo':alldatalist[4],'title':alldatalist[5]}                Res['result'] = 1                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))            else:                Res = {'result': -1}                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'factoryid is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class ChangeItem(BaseHandler):    def post(self):        ID = self.get_argument('id', None)        datajson = self.get_argument('data', None)        print(datajson,type(datajson))        QdSoftListDb = DbDataBase(filepath)        data = json.loads(datajson)        if ID:            ID = int(ID)            state = QdSoftListDb.changeitem(ID, data)            if state:                Res = {'result':1}                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))            else:                Res = {'result': -1}                Res['error'] = 'id is not exist!'                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'id is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        # factoryid = self.get_argument('factoryid', None)        # configdata = self.get_argument('configdata', None)        # title = self.get_argument('title', '')        # logo = self.get_argument('logo', '')        # distributor_list = self.get_argument('distributor_list', '')        # if ID and factoryid and configdata:        #     ID = int(ID)        #     factoryid = factoryid        #     configdata = configdata        #     QdSoftListDb = DbDataBase(filepath)        #     state = QdSoftListDb.changeitem(ID, factoryid, configdata)        #     if state:        #         Res = {'result':1}        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        #     else:        #         Res = {'result': -1}        #         Res['error'] = 'id is not exist!'        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        # elif ID and factoryid:        #     ID = int(ID)        #     factoryid = factoryid        #     QdSoftListDb = DbDataBase(filepath)        #     state = QdSoftListDb.changefactoryiditem(ID, factoryid)        #     if state:        #         Res = {'result': 1}        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        #     else:        #         Res = {'result': -1}        #         Res['error'] = 'id is not exist!'        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        # elif ID and configdata:        #     ID = int(ID)        #     configdata = configdata        #     QdSoftListDb = DbDataBase(filepath)        #     state = QdSoftListDb.changeconfig_dataitem(ID, configdata)        #     if state:        #         Res = {'result': 1}        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        #     else:        #         Res = {'result': -1}        #         Res['error'] = 'id is not exist!'        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        # else:        #     if not (configdata and factoryid):        #         Res = {'result': -1}        #         Res['error'] = 'configdata and factoryid is null!'        #         self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class EditItem(BaseHandler):    def post(self):        ID = self.get_argument('id', None)        algorithm = self.get_argument('algorithm', None)        base = self.get_argument('base', None)        memo = self.get_argument('memo', None)        if ID:            ID = int(ID)            QdOrdAlgDb = DbDataBase(filepath)            state = QdOrdAlgDb.editalg(ID, algorithm=algorithm, base=base, memo=memo)            if state:                Res = {'result': 1}                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))            else:                Res = {'result': -2}                Res['error'] = 'edititem fail!'                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': -1}            Res['error'] = 'id is null!'            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))class ReturnAlldata(BaseHandler):    def post(self):        QdSoftListDb = DbDataBase(filepath)        alldatalist = QdSoftListDb.returnitems()        if alldatalist:            Res = {'datalist': alldatalist}            Res['result'] = 1            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))        else:            Res = {'result': 0}            self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))    def get(self):        self.post()def ExtractFileExt(filename):    '''        :param filename: '123.txt'        :return: .txt        '''    if '.' not in filename:        return ''    return filename[filename.index('.'):]class ImageUploadHandler(BaseHandler):    def get(self):        self.write('''    	<html>    	<head><title>Upload File</title></head>    	<body>    	<form action='/Upload/Image/' enctype="multipart/form-data" method='post'>    	<input type='file' name='file'/><br/>    	<input type='submit' value='submit'/>    	</form>    	<form action='/Ord/BomBoardData/' enctype="multipart/form-data" method='post'>    	<input type='text' name='filename'/><br/>    	<input type='submit' value='ExportBomBoardData'/>    	</form>    	<form action='/Ord/AllData/' enctype="multipart/form-data" method='post'>    		<input type='text' name='filename'/><br/>    		<input type='submit' value='ExportAllData'/>    		</form>    	</body>    	</html>    	''')    def post(self):        upload_path = logopath        file_metas = self.request.files.get('file', None)        ID = self.get_argument('id', None)        #file_metas = self.request.files['file']  # 提取表单中‘name’为‘file’的文件元数据        if not file_metas:            ret = {'result': '0', 'information': '参数错误'}            Result = json.dumps(ret)            self.write(Result)        for meta in file_metas:            ordfilename = ExtractFileExt(meta['filename'])            guid = str(uuid.uuid1())  # 唯一标识符guid            guid = ''.join(guid.split('-'))            filename = guid+ordfilename            fileurl = 'http://js.huaguangsoft.com/logoimage/'+ filename            Imagefilepath = os.path.join(upload_path, filename)            # 有些文件需要已二进制的形式存储，实际中可以更改            with open(Imagefilepath, 'wb') as up:                up.write(meta['body'])            ret = {'result': '1','guid': fileurl}            QdSoftListDb = DbDataBase(filepath)            if ID:                state = QdSoftListDb.changelogoitem(int(ID), fileurl)                if not state:                    Res = {'result': -1}                    Res['error'] = 'id is null!'                    self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))                    return                Result = json.dumps(ret)                self.write(Result)                return            else:                Res = {'result': -1}                Res['error'] = 'id is null!'                self.write(json.dumps(Res, ensure_ascii=False).encode('utf8'))# 退出程序操作class ExitSystem(tornado.web.RequestHandler):    def get(self, *args, **kwargs):        print("***服务器退出***")        os._exit(0)  # 退出程序def maintest():    print(filepath)    QdSoftListDb = DbDataBase(filepath)    QdSoftListDb.additem('123','你的那个腾讯云win服务器上')# ========增加代码--开始========def produce_stop_bat(pid, tmpfile="stop_xxx.bat"):    # 待写入内容    stop_cmd = 'taskkill /pid ' + str(pid) + ' /f'  # 关闭指定进程    del_self_cmd = "del %0"  # 删除自身文件    # 文件路径和名称    tmp_all = os.path.join(os.path.dirname(os.path.realpath(__file__)), "stop_" + tmpfile + ".bat")    # 写入文件    with open(file=tmp_all, mode="w") as f:        f.write(stop_cmd + "\n" + del_self_cmd)def outputlog():    main_log_handler = logging.FileHandler(log_path +                                           "/dd_%s.log" % time.strftime("%Y-%m-%d_%H-%M-%S",                                                                        time.localtime(time.time())), mode="w+",                                           encoding="utf-8")    main_log_handler.setLevel(logging.DEBUG)    formatter = logging.Formatter("%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s")    main_log_handler.setFormatter(formatter)    logger.addHandler(main_log_handler)    # 控制台打印输出日志    console = logging.StreamHandler()  # 定义一个StreamHandler，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象    console.setLevel(logging.DEBUG)  # 设置要打印日志的等级，低于这一等级，不会打印    formatter = logging.Formatter("%(asctime)s - %(levelname)s: %(message)s")    console.setFormatter(formatter)    logging.getLogger('').addHandler(console)    # 进程号    pid = os.getpid()    # 本文件名（不含后缀.py）    myfilename = os.path.split(__file__)[-1].split(".")[0]    # 生成关闭进程的脚本文件    produce_stop_bat(pid, myfilename)    # ========增加代码--结束========class QuickDrawIndex(BaseHandler):    def get(self, *args, **kwargs):        self.factoryid = self.get_argument('qdsoft', '000_qdsoft')        QdSoftListDb = DbDataBase(filepath)        alldatalist = QdSoftListDb.getitem(self.factoryid)        if alldatalist:            Res = {'id': alldatalist[0], 'factoryid': alldatalist[1],                   'config_data': alldatalist[2], 'distributor_list': alldatalist[3],                   'logo': alldatalist[4], 'title': alldatalist[5]}            title = Res['title']            my_logo = Res['logo']        else:            Res = {'result': -1}            title = ''            my_logo = ''        try:            # title = '123'            # print('title=',title,'my_logo=',my_logo)            self.render('000_qdsoft'+"/htmloutput/QuickDraw.html",my_title=title, my_logo=my_logo)        except Exception as e:            print(e)            self.render('000_qdsoft'+"/htmloutput/403.html")# 获取静态文件class IndexHandler(tornado.web.StaticFileHandler):    def set_extra_headers(self,path):        self.set_header("Cache-control", "no-cache")def main():    application = tornado.web.Application([        (r'/QdSoftListDb/AddItem/', AddItem),  # 增加接口 http://127.0.0.1:8000/QdSoftListDb/AddItem/?factoryid=%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE1&configdata=hello        (r'/QdSoftListDb/DeleteItem/', DeleteItem),  # 上传图片接口    http://127.0.0.1:8000/QdSoftListDb/DeleteItem/?id=2061        (r'/QdSoftListDb/FindItem/', FindItem),    #http://127.0.0.1:8000/QdSoftListDb/FindItem/?factoryid=测试数据        (r'/QdSoftListDb/ChangeItem/',ChangeItem),    #http://127.0.0.1:8000/QdSoftListDb/ChangeItem/?id=2062&factoryid=测试数据2&configdata=hello world        (r'/QdSoftListDb/GetItem/', GetItem),    #http://127.0.0.1:8000/QdSoftListDb/GetItem/?factoryid=测试数据        (r'/QdSoftListDb/ReturnAlldata/', ReturnAlldata), #http://127.0.0.1:8000/QdSoftListDb/ReturnAlldata/        (r'/QdOrdAlg/EditItem/', EditItem),    #http://127.0.0.1:8000/QdOrdAlg/EditItem/?id=1&base=2        (r'/QdOrdAlg/FindItem/', SearchAlgItem),    #http://127.0.0.1:8000/QdOrdAlg/FindItem/?id=1        (r'/QdSoftListDb/Image/', ImageUploadHandler),        (r"/(.*)/htmloutput/QuickDrawIndex", QuickDrawIndex),        (r"/(.*)", IndexHandler, {"path": dataDBPath}),  # 查找文件        (r"/exit_localserver", ExitSystem),    ], debug=True,        autoreload=True,        template_path=dataDBPath,        static_hash_cache=False)  # 增加代码有改动，服务器自动重启    # template_path = 'templates'    # static_path = 'static'    tornado.options.parse_command_line()    http_server = tornado.httpserver.HTTPServer(application)    http_server.listen(options.port)    tornado.ioloop.IOLoop.instance().start()if __name__ == '__main__':    # 如果日志文件夹不存在，则创建    log_dir = "log"  # 日志存放文件夹名称    log_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),log_dir)    if not os.path.isdir(log_path):        os.makedirs(log_path)    # 设置logging    logger = logging.getLogger()    logger.setLevel(logging.DEBUG)    outputlog()    main()