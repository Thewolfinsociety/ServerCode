# -*- coding: utf-8 -*-'''服务器版功能：返回趟门掩门配置vesion 1.0.1202003011增加高级编程GetSlidingAndDoorConfig20191217.py 最新author:litao'''from xml.dom import minidomimport xml.etree.ElementTree as ETimport loggingimport osimport sysimport mathimport pypyodbcimport tracebackfrom lupa import LuaRuntimeimport threadingimport timefrom bsddb3 import dbimport jsonimport tornadofrom tornado.concurrent import Futureimport asyncioimport redisimport copyif os.getcwd()+'\\Python3\\' not in sys.path:    sys.path.append(os.getcwd()+'\\Python3\\ReturnConfig\\')from ExpValue import GetExpValuepool = redis.ConnectionPool(host='127.0.0.1',port=6379)    #'129.204.134.85'r = redis.Redis(connection_pool=pool)threadLock = threading.Lock()log_dir = "log"  # 日志存放文件夹名称log_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), log_dir)if not os.path.isdir(log_path):    os.makedirs(log_path)#全局变量部分Sliding = {        'SfgParam': {            'HTxml': '<产品 名称="横2格门" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" 宽="L" 深="$竖中横厚度" 高="$竖中横宽度" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="L-$门芯1宽度-$竖中横宽度+2*$竖中横进槽" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/></我的模块><我的规格><规格 名称="竖2格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',            'Txml': '<产品 名称="竖2格门" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横宽度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="L-$门芯1宽度-$竖中横宽度+2*$竖中横进槽" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/></我的模块><我的规格><规格 名称="竖2格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',            'Sxml': '<产品 名称="竖3格门_两边均分" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横宽度+$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" Y="$门芯3前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/></我的模块><我的规格><规格 名称="竖3格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',            'Fxml': '<产品 名称="竖4格门_改123" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="4" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="$门芯1宽度+$门芯2宽度+$竖中横宽度-3*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="4" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="$门芯1宽度+$门芯2宽度+2*$竖中横宽度-4*$竖中横进槽" Y="$门芯3前偏移" Z="0" 宽="$门芯3宽度" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/><板件 名称="竖中横3" X="$门芯1宽度+$门芯2宽度+$门芯3宽度+2*$竖中横宽度-5*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="4" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="6"/><板件 名称="门芯4" X="L-(L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽)" Y="$门芯4前偏移" Z="0" 宽="L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽" 深="$门芯4厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="7"/></我的模块><我的规格><规格 名称="竖3格门" 宽="900" 深="20" 高="1000"/></我的规格></产品>',            'HSxml': '<产品 名称="横3格门_两边均分" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横宽度+$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" Y="$门芯3前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/></我的模块><我的规格><规格 名称="竖3格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',            'HFxml': '<产品 名称="横4格门_改123" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="$门芯1宽度+$门芯2宽度+$竖中横宽度-3*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="$门芯1宽度+$门芯2宽度+2*$竖中横宽度-4*$竖中横进槽" Y="$门芯3前偏移" Z="0" 宽="$门芯3宽度" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/><板件 名称="竖中横3" X="$门芯1宽度+$门芯2宽度+$门芯3宽度+2*$竖中横宽度-5*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="6"/><板件 名称="门芯4" X="L-(L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽)" Y="$门芯4前偏移" Z="0" 宽="L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽" 深="$门芯4厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="7"/></我的模块><我的规格><规格 名称="竖3格门" 宽="900" 深="20" 高="1000"/></我的规格></产品>'},    }def outputlog():    # 只记入error 进入文件    Errorhandler= logging.FileHandler(log_path +                                           "/Error_%s.log" % time.strftime("%Y-%m-%d_%H-%M-%S",                                                                         time.localtime(time.time())), mode="w+",                                           encoding="utf-8")    Errorhandler.setLevel(logging.INFO)    formatter = logging.Formatter("%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s")    Errorhandler.setFormatter(formatter)    Error.addHandler(Errorhandler)    Error.propagate = False    # 只记录 INFO 进入文件    INFOhandler = logging.FileHandler(log_path +                                           "/INFO_%s.log" % time.strftime("%Y-%m-%d_%H-%M-%S",                                                                             time.localtime(time.time())), mode="w+",                                           encoding="utf-8")    info_filter = logging.Filter()    #真实有过滤作用    info_filter.filter = lambda record: record.levelno < logging.WARNING  # 设置过滤等级    formatter = logging.Formatter("%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s")    INFOhandler.setFormatter(formatter)    INFO.addFilter(info_filter)    INFO.addHandler(INFOhandler)    INFO.propagate = False    #日志不输出到控制台    # #将所有记入文件    # main_log_handlerall = logging.FileHandler(log_path +    #                                        "/ALL_%s.log" % time.strftime("%Y-%m-%d_%H-%M-%S",    #                                                                          time.localtime(time.time())), mode="w+",    #                                        encoding="utf-8")    # info_filter = logging.Filter()  # 真实有过滤作用    # info_filter.filter = lambda record: record.levelno < logging.WARNING  # 设置过滤等级    #    # # main_log_handler.setLevel(logging.DEBUG)    # formatter = logging.Formatter("%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s")    # main_log_handlerall.setFormatter(formatter)    # AllLog.addFilter(info_filter)    # AllLog.addHandler(main_log_handlerall)    #    # #控制台打印输出日志    # console = logging.StreamHandler()  # 定义一个StreamHandler，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象    # console.setLevel(logging.INFO)  # 设置要打印日志的等级，低于这一等级，不会打印    # formatter = logging.Formatter("%(asctime)s - %(levelname)s: %(message)s")    # console.setFormatter(formatter)    # logging.getLogger('ALL').addHandler(console)AllLog = logging.getLogger('ALL')INFO = logging.getLogger('INFO')Error = logging.getLogger('ERROR')outputlog()#举例查看log的形式INFO.setLevel(logging.INFO)class PDoorsParam(object):    #掩门参数    def __init__(self):        self.id = 0        self.deleted = False        self.name = ''        self.DoorsType = ''        self.handle = ''        self.wjname = ''        self.hboxname = ''        self.paneltype = ''        self.cap = 0        self.eb_cap = 0        self.vboxname = ''        self.udboxname = ''        self.vboxl = ''        self.udboxl = ''        self.vboxh = 0        self.udboxh = 0        self.vthick = 0        self.udthick = 0        self.vboxjtw = 0        self.udboxjtw = 0        self.hboxjtw = 0        self.udbox_hbox_value = 0        self.d3name = ''        self.hbox3d = ''        self.ubox3d = ''        self.dbox3d = ''        self.cpm_lmax = 0        self.cpm_hmax = 0        self.vdirect = ''        self.vfbstr = ''        self.uddirect = ''        self.udfbstr = ''        self.vmemo = ''        self.udmemo = ''        self.fbstr = ''        self.iscalc_framebom = 0        self.is_xq = 0        self.cb_yyvalue = 0        self.is_buy = 0        self.frame_valuel = 0        self.frame_valueh = 0        self.bomtype = ''        self.left_doorxml = ''        self.right_doorxml = ''        self.doorxml = ''        self.bdfile = ''        self.l_bdfile = ''        self.r_bdfile = ''        self.u_bdfile = ''        self.d_bdfile = ''        self.noframe_bom = 0class TDoorDoorRect(object):    def __init__(self):        self.x0 = 0        self.y0 = 0        self.doorw = 0        self.doorh = 0        self.x1 = 0        self.y1 = 0        self.doorw1 = 0        self.doorh1 = 0        self.selected = False        self.hhdraw = False        self.mOpenDirect = '' #开门方向        self.mMemo = ''        self.mDoorW = 0        self.mDoorH = 0        self.mVBoxW = 0        self.mUDBoxH = 0        self.mVBoxW0 = 0        self.mUDBoxH0 = 0        self.mHandle = ''        self.mHandlePos = ''        self.mHandlePosX = ''        self.mHandlePosY = ''        self.mHandleX = 0        self.mHandleY = 0        self.mHandleW = 0        self.mHandleH = 0        self.mHinge = ''        self.mHingeCt = ''        self.mIsFrame = False        self.mHHArr = []        self.mPanelType = ''        self.mPanelColor = ''        self.boxlist = []        self.panellist = []        self.mYPos = 0        self.mPParam = PDoorsParam()        self.mHingeHoleDes = ''        self.mHingeHoleParam = ''        self.mHingeHoleExtra = ''class TDoorRect(object):    def __init__(self):        self.doorw = 0        self.doorh = 0        self.x0 = 0        self.y0 = 0        self.doorw2 = 0        self.doorh2 = 0        self.selected = False        self.mUDBoxParam = {}        self.mVBoxParam = {}        self.mPanelType = ''        self.mPanelColor = ''        self.mVBoxColor = ''        self.boxlist = []        self.panellist = []        self.mYPos = 0class DoorRectPanel(object):    def __init__(self):        self.selected = False        self.w0 = 0                  #可视        self.h0 = 0        self.x0 = 0        self.y0 = 0        self.d0 = 0        self.w1 = 0        self.h1 = 0        self.x1 = 0        self.y1 = 0        self.d1 = 0        self.w2 = 0        self.h2 = 0        self.x2 = 0        self.y2 = 0        self.d2 = 0        self.PanelType = ''        self.color = ''        self.direct =''        self.pricetype = ''        self.color2 = ''        self.price = 0        self.price2 = 0        self.thick = 0class RectPanel(object):    def __init__(self):        self.selected = False        self.w0 = 0                  #可视        self.h0 = 0        self.x0 = 0        self.y0 = 0        self.d0 = 0        self.w1 = 0        self.h1 = 0        self.x1 = 0        self.y1 = 0        self.d1 = 0        self.w2 = 0        self.h2 = 0        self.x2 = 0        self.y2 = 0        self.d2 = 0        self.PanelType = ''        self.color = ''        self.direct =''        self.memo = ''        self.pricetype = ''        self.color2 = ''        self.price = 0        self.price2 = 0        self.extradata = ''class DoorRectBox(object):    def __init__(self):        self.vh = False        self.selected = False        self.w0 = 0                  #可视        self.h0 = 0        self.x0 = 0        self.y0 = 0        self.d0 = 0        self.w1 = 0        self.h1 = 0        self.x1 = 0        self.y1 = 0        self.d1 = 0        self.w2 = 0        self.h2 = 0        self.x2 = 0        self.y2 = 0        self.d2 = 0        self.boxtype = ''        self.color = ''#用于计算lua文件class Executor(object):    """        执行lua的类    """    luaRuntime = None    def __init__(self, filepath, params):        threading.Thread.__init__(self)        self.filepath = filepath        self.params = params        self.xml = ''    def run(self):        try:            # 执行具体的函数,返回结果打印在屏幕上            self.xml = self.getLuaRuntime()            return self.xml        except Exception as e:            Error.error(self.filepath + ', Cal error' + str(e)+str(self.params))            traceback.extract_stack()    def getLuaRuntime(self):        """            从文件中加载要执行的lua脚本,初始化lua执行环境        """        fileHandler = open(self.filepath)        content = ReadFile(self.filepath)        # content = ''        # try:        #     with open(self.filepath, 'r', encoding='utf8') as f:        #         content = f.read()        # except Exception as e:        #     INFO.info(self.filepath + ',FILE_UTF8 Decode Error')        #        # if content == '':        #     try:        #         with open(self.filepath, 'r', encoding='gbk') as f:        #             content = f.read()        #     except Exception as e:        #         INFO.info(self.filepath + ',FILE_GBK Decode Error')        # 创建lua执行环境        Executor.luaScriptContent = content        luaRuntime = LuaRuntime()        luaRuntime.execute(self.params)        # 从lua执行环境中取出全局函数functionCall作为入口函数调用,实现lua的反射调用        g = luaRuntime.globals()        pycall = luaRuntime.eval('function(pyfunc) math.pow=pyfunc end')        pycall(math.pow)        luaRuntime.execute(content)        self.xml = g.XML        Executor.luaRuntime = None        return self.xml    def getxml(self):        return self.xml#bomlistclass InitBomOrderItem(object):    cid = 0    id = 0    pid = -1    seq = 0    classseq = 0    mark = 0    vp = 0    # 新加属性    code = ''    name = ''    mat = ''    mat2 = ''    mat3 = ''    color = ''    workflow = ''    pl = 0    pd = 0    ph = 0    space_x = 0    space_y = 0    space_z = 0    space_id = 0    gcl = 0    gcd = 0    gch = 0    gcl2 = 0    gcd2 = 0    gch2 = 0    tmp_soz = ''    lx = 0    ly = 0    lz = 0    x = 0    y = 0    z = 0    l = 0    p = 0    h = 0    gl = 0    gp = 0    gh = 0    holeflag = 0    linemax = 0    holetype = 0    ox = 0    oy = 0    oz = 0    childnum = 0    desc = ''    bomdes = ''    bomwjdes = ''    bomstddes = ''    childbom = ''    myclass = ''    nodename = ''    linecalc = ''    bomstd = ''    bg = ''    direct = 0    lgflag = 0    holeid = 0    kcid = 0    num = 0    lfb = 0    llk = 0    wfb = 0    wlk = 0    llfb = 0    rrfb = 0    ddfb = 0    uufb = 0    fb = 0    holestr = ''    kcstr = ''    memo = ''    gno = ''    gdes = ''    gcb = ''    extra = ''    fbstr = ''    subspace = ''    process = ''    ls = ''    myunit = ''    bomtype = ''    bdxmlid = ''    user_fbstr = ''    bl = 0    bp = 0    bh = 0    var_names = [''] * 16    var_args = [0] * 16    value_lsk = 0    value_rsk = 0    value_zk = 0    value_zs = 0    value_ls = 0    value_lg = 0    value_ltm = 0    value_rtm = 0    a_hole_info = ''    b_hole_info = ''    holeinfo = ''    isoutput = True    is_outline = False    outputtype = ''    holeconfig_flag = ''    kcconig_flag = ''    bg_data = ''    mBGParam = ''    bg_filename = ''    mpr_filename = ''    bpp_filename = ''    devcode = ''    zero_y = 0    direct_calctype = 0    youge_holecalc = 0    is_output_bgdata = 0    is_output_mpr = 0    is_output_bpp = 0    bg_l_minx = 0    bg_l_maxx = 0    bg_r_minx = 0    bg_r_maxx = 0    bg_d_minx = 0    bg_d_maxx = 0    bg_u_minx = 0    bg_u_maxx = 0    bg_b_minx = 0    bg_b_maxx = 0    bg_f_minx = 0    bg_f_maxx = 0    bg_l_miny = 0    bg_l_maxy = 0    bg_r_miny = 0    bg_r_maxy = 0    bg_d_miny = 0    bg_d_maxy = 0    bg_u_miny = 0    bg_u_maxy = 0    bg_b_miny = 0    bg_b_maxy = 0    bg_f_miny = 0    bg_f_maxy = 0    hole_back_cap = 0    hole_2_dist = 0    trans_ab = False    ahole_index = [-1] * 101    bhole_index = [-1] * 101    akc_index = [-1] * 101    bkc_index = [-1] * 101    is_calc_holeconfig = [0] * 6    parent = None    basewj_price = ''    extend = ''    group = ''    packno = ''    userdata = ''    userdefine = ''    guid = ''def DoorRecalcDoor(door, t1, t2, tt1, tt2, m, mGridItem):    if (mGridItem==6) and (len(door.panellist)==2):  #// 两均分(下格固定)        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + (t2 / 1) * (0 + 0) + tt2 * m            rb.y1 = rb.y1 + (t2 / 1) * (0 + 0) + tt2 * m            rb.y2 = rb.y2 + (t2 / 1) * (0 + 0) + tt2 * m            rb.x0 = rb.x0 + tt1 * m            rb.x1 = rb.x1 + tt1 * m            rb.x2 = rb.x2 + tt1 * m            rb.w0 = rb.w0 + t1            rb.w1 = rb.w1 + t1            rb.w2 = rb.w2 + t1        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            n = 0            if j==1: pnl.h0 = pnl.h0 + (t2 / 1)            pnl.y0 = pnl.y0 + (t2 / 1) * n + tt2 * m            if j==1: pnl.h1 = pnl.h1 + (t2 / 1)            pnl.y1 = pnl.y1 + (t2 / 1) * n + tt2 * m            if j==1: pnl.h2 = pnl.h2 + (t2 / 1)            pnl.y2 = pnl.y2 + (t2 / 1) * n + tt2 * m            pnl.x0 = pnl.x0 + tt1 * m            pnl.x1 = pnl.x1 + tt1 * m            pnl.x2 = pnl.x2 + tt1 * m            pnl.w0 = pnl.w0 + t1            pnl.w1 = pnl.w1 + t1            pnl.w2 = pnl.w2 + t1    elif (mGridItem==8) and (len(door.panellist)==3) : #// 三格，中间格保持不变        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + (t2 / 2) * (0 + 1) + tt2 * m            rb.y1 = rb.y1 + (t2 / 2) * (0 + 1) + tt2 * m            rb.y2 = rb.y2 + (t2 / 2) * (0 + 1) + tt2 * m            rb.x0 = rb.x0 + tt1 * m            rb.x1 = rb.x1 + tt1 * m            rb.x2 = rb.x2 + tt1 * m            rb.w0 = rb.w0 + t1            rb.w1 = rb.w1 + t1            rb.w2 = rb.w2 + t1        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            n = j            if j == 2: n = 1            if j != 1: pnl.h0 = pnl.h0 + (t2 / 2)            pnl.y0 = pnl.y0 + (t2 / 2) * n + tt2 * m            if j != 1: pnl.h1 = pnl.h1 + (t2 / 2)            pnl.y1 = pnl.y1 + (t2 / 2) * n + tt2 * m            if j != 1: pnl.h2 = pnl.h2 + (t2 / 2)            pnl.y2 = pnl.y2 + (t2 / 2) * n + tt2 * m            pnl.x0 = pnl.x0 + tt1 * m            pnl.x1 = pnl.x1 + tt1 * m            pnl.x2 = pnl.x2 + tt1 * m            pnl.w0 = pnl.w0 + t1            pnl.w1 = pnl.w1 + t1            pnl.w2 = pnl.w2 + t1    elif (mGridItem==7) and (len(door.panellist)==2): #// 两均分(上格固定)        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + (t2 / 1) * (0 + 1) + tt2 * m            rb.y1 = rb.y1 + (t2 / 1) * (0 + 1) + tt2 * m            rb.y2 = rb.y2 + (t2 / 1) * (0 + 1) + tt2 * m            rb.x0 = rb.x0 + tt1 * m            rb.x1 = rb.x1 + tt1 * m            rb.x2 = rb.x2 + tt1 * m            rb.w0 = rb.w0 + t1            rb.w1 = rb.w1 + t1            rb.w2 = rb.w2 + t1        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            n = 0            if j==1: n =1            if j==0: pnl.h0 =pnl.h0 + (t2 / 1)            pnl.y0 = pnl.y0 + (t2 / 1) * n + tt2 * m            if j==0: pnl.h1 =pnl.h1 + (t2 / 1)            pnl.y1 = pnl.y1 + (t2 / 1) * n + tt2 * m            if j==0: pnl.h2 =pnl.h2 + (t2 / 1)            pnl.y2 = pnl.y2 + (t2 / 1) * n + tt2 * m            pnl.x0 = pnl.x0 + tt1 * m            pnl.x1 = pnl.x1 + tt1 * m            pnl.x2 = pnl.x2 + tt1 * m            pnl.w0 = pnl.w0 + t1            pnl.w1 = pnl.w1 + t1            pnl.w2 = pnl.w2 + t1    elif (mGridItem==9) and (len(door.panellist)==3) : #// 三均分(上两格固定)        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + (t2 / 1) * (0 + 1) + tt2 * m            rb.y1 = rb.y1 + (t2 / 1) * (0 + 1) + tt2 * m            rb.y2 = rb.y2 + (t2 / 1) * (0 + 1) + tt2 * m            rb.x0 = rb.x0 + tt1 * m            rb.x1 = rb.x1 + tt1 * m            rb.x2 = rb.x2 + tt1 * m            rb.w0 = rb.w0 + t1            rb.w1 = rb.w1 + t1            rb.w2 = rb.w2 + t1        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            n = 0            if j > 0: n = 1            if j==0: pnl.h0 = pnl.h0 + (t2 / 1)            pnl.y0 = pnl.y0 + (t2 / 1) * n + tt2 * m            if j==0: pnl.h1 = pnl.h1 + (t2 / 1)            pnl.y1 = pnl.y1 + (t2 / 1) * n + tt2 * m            if j==0: pnl.h2 = pnl.h2 + (t2 / 1)            pnl.y2 = pnl.y2 + (t2 / 1) * n + tt2 * m            pnl.x0 = pnl.x0 + tt1 * m            pnl.x1 = pnl.x1 + tt1 * m            pnl.x2 = pnl.x2 + tt1 * m            pnl.w0 = pnl.w0 + t1            pnl.w1 = pnl.w1 + t1            pnl.w2 = pnl.w2 + t1    elif (mGridItem==10) and (len(door.panellist)==3) : #// 三均分(上两格固定)        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + (t2 / 1) * (0 + 0) + tt2 * m            rb.y1 = rb.y1 + (t2 / 1) * (0 + 0) + tt2 * m            rb.y2 = rb.y2 + (t2 / 1) * (0 + 0) + tt2 * m            rb.x0 = rb.x0 + tt1 * m            rb.x1 = rb.x1 + tt1 * m            rb.x2 = rb.x2 + tt1 * m            rb.w0 = rb.w0 + t1            rb.w1 = rb.w1 + t1            rb.w2 = rb.w2 + t1        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            n = 0            if j==2 : pnl.h0 = pnl.h0 + (t2 / 1)            pnl.y0 = pnl.y0 + (t2 / 1) * n + tt2 * m            if j==2 : pnl.h1 = pnl.h1 + (t2 / 1)            pnl.y1 = pnl.y1 + (t2 / 1) * n + tt2 * m            if j==2 : pnl.h2 = pnl.h2 + (t2 / 1)            pnl.y2 = pnl.y2 + (t2 / 1) * n + tt2 * m            pnl.x0 = pnl.x0 + tt1 * m            pnl.x1 = pnl.x1 + tt1 * m            pnl.x2 = pnl.x2 + tt1 * m            pnl.w0 = pnl.w0 + t1            pnl.w1 = pnl.w1 + t1            pnl.w2 = pnl.w2 + t1    else:        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + (t2 / len(door.panellist)) * (j + 1) + tt2 * m            rb.y1 = rb.y1 + (t2 / len(door.panellist)) * (j + 1) + tt2 * m            rb.y2 = rb.y2 + (t2 / len(door.panellist)) * (j + 1) + tt2 * m            rb.x0 = rb.x0 + tt1 * m            rb.x1 = rb.x1 + tt1 * m            rb.x2 = rb.x2 + tt1 * m            rb.w0 = rb.w0 + t1            rb.w1 = rb.w1 + t1            rb.w2 = rb.w2 + t1        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            pnl.h0 = pnl.h0 + (t2 / len(door.panellist))            pnl.y0 = pnl.y0 + (t2 / len(door.panellist)) * j + tt2 * m            pnl.h1 = pnl.h1 + (t2 / len(door.panellist))            pnl.y1 = pnl.y1 + (t2 / len(door.panellist)) * j + tt2 * m            pnl.h2 = pnl.h2 + (t2 / len(door.panellist))            pnl.y2 = pnl.y2 + (t2 / len(door.panellist)) * j + tt2 * m            pnl.x0 = pnl.x0 + tt1 * m            pnl.x1 = pnl.x1 + tt1 * m            pnl.x2 = pnl.x2 + tt1 * m            pnl.w0 = pnl.w0 + t1            pnl.w1 = pnl.w1 + t1            pnl.w2 = pnl.w2 + t1def RecalcDoor(door, t1, t2, hh, mGridItem):    if (mGridItem == 6) and (len(door.panellist)==2):  # 两均分(下格固定)        t2 = hh        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + t2 * (0 + 0)            rb.y1 = rb.y1 + t2 * (0 + 0)            rb.y2 = rb.y2 + t2 * (0 + 0)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            if j==1:                pnl.h0 = pnl.h0 + t2                pnl.y0 = pnl.y0                pnl.h1 = pnl.h1 + t2                pnl.y1 = pnl.y1                pnl.h2 = pnl.h2 + t2                pnl.y2 = pnl.y2    elif (mGridItem == 7) and (len(door.panellist)==2):  # 两均分，上格固定        t2 = hh        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + t2 * (0 + 1)            rb.y1 = rb.y1 + t2 * (0 + 1)            rb.y2 = rb.y2 + t2 * (0 + 1)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            if j==1:                pnl.h0 = pnl.h0                pnl.y0 = pnl.y0 + t2                pnl.h1 = pnl.h1                pnl.y1 = pnl.y1 + t2                pnl.h2 = pnl.h2                pnl.y2 = pnl.y2 + t2            elif j==0:                pnl.h0 = pnl.h0 + t2                pnl.y0 = pnl.y0                pnl.h1 = pnl.h1 + t2                pnl.y1 = pnl.y1                pnl.h2 = pnl.h2 + t2                pnl.y2 = pnl.y2    elif (mGridItem == 8) and (len(door.panellist)==3):  # 三格，中间格固定        t2 = hh / 2        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + t2 * (0 + 1)            rb.y1 = rb.y1 + t2 * (0 + 1)            rb.y2 = rb.y2 + t2 * (0 + 1)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            if j==1:                pnl.h0 = pnl.h0                pnl.y0 = pnl.y0 + t2                pnl.h1 = pnl.h1                pnl.y1 = pnl.y1 + t2                pnl.h2 = pnl.h2                pnl.y2 = pnl.y2 + t2            elif j==0:                pnl.h0 = pnl.h0 + t2                pnl.y0 = pnl.y0                pnl.h1 = pnl.h1 + t2                pnl.y1 = pnl.y1                pnl.h2 = pnl.h2 + t2                pnl.y2 = pnl.y2            elif j==2:                pnl.h0 = pnl.h0 + t2                pnl.y0 = pnl.y0 + t2                pnl.h1 = pnl.h1 + t2                pnl.y1 = pnl.y1 + t2                pnl.h2 = pnl.h2 + t2                pnl.y2 = pnl.y2 + t2    elif (mGridItem == 9) and (len(door.panellist)==3):  # 三均分(上两格固定)        t2 = hh        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + t2 * (0 + 1)            rb.y1 = rb.y1 + t2 * (0 + 1)            rb.y2 = rb.y2 + t2 * (0 + 1)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            if j > 0:                pnl.h0 = pnl.h0                pnl.y0 = pnl.y0 + t2                pnl.h1 = pnl.h1                pnl.y1 = pnl.y1 + t2                pnl.h2 = pnl.h2                pnl.y2 = pnl.y2 + t2            elif j==0:                pnl.h0 = pnl.h0 + t2                pnl.y0 = pnl.y0                pnl.h1 = pnl.h1 + t2                pnl.y1 = pnl.y1                pnl.h2 = pnl.h2 + t2                pnl.y2 = pnl.y2    elif (mGridItem == 10) and (len(door.panellist)==3):  # 三均分(下两格固定)    }        t2 = hh        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + t2 * (0 + 0)            rb.y1 = rb.y1 + t2 * (0 + 0)            rb.y2 = rb.y2 + t2 * (0 + 0)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            if j > 1:                pnl.h0 = pnl.h0 + t2                pnl.y0 = pnl.y0                pnl.h1 = pnl.h1 + t2                pnl.y1 = pnl.y1                pnl.h2 = pnl.h2 + t2                pnl.y2 = pnl.y2            elif j==0:                pnl.h0 = pnl.h0                pnl.y0 = pnl.y0                pnl.h1 = pnl.h1                pnl.y1 = pnl.y1                pnl.h2 = pnl.h2                pnl.y2 = pnl.y2    else:        t2 = hh / (len(door.panellist))        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            rb.y0 = rb.y0 + t2 * (j + 1)            rb.y1 = rb.y1 + t2 * (j + 1)            rb.y2 = rb.y2 + t2 * (j + 1)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            pnl.h0 = pnl.h0 + t2            pnl.y0 = pnl.y0 + t2 * j            pnl.h1 = pnl.h1 + t2            pnl.y1 = pnl.y1 + t2 * j            pnl.h2 = pnl.h2 + t2            pnl.y2 = pnl.y2 + t2 * jdef Delphi_Round(num):    if num < 0:        return -int((Delphi_Round(-num)))    round10 = num * 10    round1 = round(num)    if (round10 - round1 * 10 == -5):        pint = int(num)        pvalue = pint % 10  # ; // 个位的数值        if (pvalue % 2):            return (pint + 1)  # // 奇进偶不进        else:            return pint    else:        return int(round1)def Number(string):    try:        return float(string)    except:        return 0def GetTrueFalse(string):    if(string == 'TRUE' or string == 'True'or string == True or string == 1):        return True    else:        return Falsedef sSort(HCfgobj):    for i in range(0, len(HCfgobj)):        slist = HCfgobj[i]['门芯列表']        nList = []        if (len(slist) == 3): nList = ['门芯1', '竖中横1', '门芯2']        if (len(slist) == 5): nList = ['门芯1', '竖中横1', '门芯2', '竖中横2', '门芯3'];        if (len(slist) == 7): nList = ['门芯1', '竖中横1', '门芯2', '竖中横2', '门芯3', '竖中横3', '门芯4']        for j in range(0, len(nList)):            for k in range(0, len(slist)):                if (nList[j] == slist[k]['名称']):                    nList[j] = slist[k]                    break        HCfgobj[i]['门芯列表'] = nListdef returnresdata(recemessage):    try:        status = True        content = r.get(recemessage)        if not content:            return False, ''        result = json.loads(content)    except Exception as e:        status = False        result = ''        content = ''        #(e)    return status, resultdef getfirstchild(node):    Result = None    for child in node.childNodes:        if child.nodeType !=1: continue        Result = child        break    return Resultdef IsHasObj(oldlist, obj):    Result = False    if obj in oldlist:        Result = True    return Resultdef Add2Config(name, obj):    if obj == {}:return    if name not in config['ymconfig']:        config['ymconfig'][name] = []    ishas = False    ishas = IsHasObj(config['ymconfig'][name], obj)    if ishas:return    config['ymconfig'][name].append(obj)    #INFO.debug(name+json.dumps(obj,ensure_ascii=False))def Add2SlidingConfig(name, obj):    if name not in config['tmconfig']:        config['tmconfig'][name] = []    ishas = IsHasObj(config['tmconfig'][name], obj)    if ishas: return    config['tmconfig'][name].append(obj)    #INFO.debug(name+json.dumps(obj,ensure_ascii=False))def arryFindstr(arr, string):    for k in range(len(arr)):        if (arr[k] == string):            return True    return Falsedef AddmWJBomDetailList(myversion, wjname, door_bh, opendirect, bktype):    pwjbom = getdata(myversion, wjname, GetWjBom)    if pwjbom:        Add2Config('mWJBomList', pwjbom)  # 五金配件分类.cfg        for i in range(len(mWJBomDetailList)):            pwjbomdetail = mWJBomDetailList[i]            if ((pwjbomdetail['bomname'] == pwjbom['name']) and ((pwjbomdetail['door_bh'] == 0)                                                                 or (pwjbomdetail['door_bh'] == door_bh))                    and ((pwjbomdetail['opendirect'] == '') or (pwjbomdetail['opendirect'] == opendirect))                    and ((pwjbomdetail['bktype'] == '') or (arryFindstr(pwjbomdetail['bktypeAry'], bktype)))):                Add2Config('mWJBomDetailList', pwjbomdetail)  # 五金配件分类数据.cfg                if pwjbomdetail:                    pa = getdata(myversion, pwjbomdetail['name'], GetDoorAccessory)                    Add2Config('mAccessoryList', pa)def AddDoorPanelBomDetailList(bomclass, mat, color, color2, color3, pnll, pnlh):    for i in range(0, len(mDoorPanelBomDetailList)):        ppbdetail = mDoorPanelBomDetailList[i]        if ((ppbdetail['bomclass'] == bomclass) and (float(ppbdetail['lmin']) < float(pnll)) and (float(ppbdetail['lmax']) >= float(pnll)) and (                float(ppbdetail['hmin']) < float(pnlh)) and (float(ppbdetail['hmax']) >= float(pnlh))):            Add2Config('mDoorPanelBomDetailList', ppbdetail)#####################################################################趟门def GetSlidingExp(name):    Result = {}    for i in range(0, len(mSlidingExpList)):        if (mSlidingExpList[i]['name'] == name):            Result = mSlidingExpList[i]    return Resultdef GetSlidingType(name):    Result = {}    for i in range(0, len(mSlidingTypeList)):        if (mSlidingTypeList[i]['name'] == name):            Result = mSlidingTypeList[i]    return Resultdef GetSlidingParam(name):    Result = {}    for i in range(0, len(mSlidingParamList)):        if (mSlidingParamList[i]['name'] == name):            Result = mSlidingParamList[i]    return Resultdef GetTrackParam(name):    Result = {}    for i in range(0, len(mTrackParamList)):        if (mTrackParamList[i]['name'] == name):            Result = mTrackParamList[i]    return Resultdef GetSlidingHBoxParam(name):    Result = {}    for i in range(0, len(mHBoxParamList)):        if (mHBoxParamList[i]['name'] == name):            Result = mHBoxParamList[i]    return Resultdef GetUDBoxParam(name):    Result = {}    for i in range(0, len(mUDBoxParamList)):        if (mUDBoxParamList[i]['name'] == name):            Result = mUDBoxParamList[i]    return Resultdef GetVBoxParam(name):    Result = {}    for i in range(0, len(mVBoxParamList)):        if (mVBoxParamList[i]['name'] == name):            Result = mVBoxParamList[i]    return Resultdef GetSlidingColorClass(*argv):    if len(argv) == 3:        styp = argv[0]        stype2 = argv[1]        clor = argv[2]        Result = {}        for i in range(0,len(mSlidingColorClassList)):            if ((mSlidingColorClassList[i]['myclass'] == styp) and (mSlidingColorClassList[i]['mat'] == stype2) and            ((clor == mSlidingColorClassList[i]['color']))):                Result = mSlidingColorClassList[i]                break        return Result    if len(argv) == 2:        myclass = argv[0]        color = argv[1]        Result = {}        for i in range(0, len(mSlidingColorClassList)):            if ((mSlidingColorClassList[i]['myclass'] == myclass) and                    ((color != '') or (color == mSlidingColorClassList[i]['color']))):                Result = mSlidingColorClassList[i]                break        return Resultdef GetSlidingAccessory(name):    Result = {}    for k in range(0,len(mSlidingAccessoryList)):        if(mSlidingAccessoryList[k]['name'] == name):            Result = mSlidingAccessoryList[k]            break    return Resultdef GetSlidingPanelType(bktype, name):    result = None    for ii in range(len(PanelTypeList)):        if (PanelTypeList[ii]['name'] == name and PanelTypeList[ii]['bktype'] == bktype):            result = PanelTypeList[ii]    return resultdef GetSlidingSSExp(name):    Result = {}    for i in range(0, len(mSSExpList)):        if (mSSExpList[i]['paneltype'] == name):            Result = mSSExpList[i]    return Resultdef ToColor(c, c1, c2, c3, c4):  #//:string;_    Result = c    if( c=='$竖框配件颜色1' ): Result = c1    if( c=='$竖框配件颜色2' ): Result = c2    if( c=='$竖框配件颜色3' ): Result = c3    if( c=='$竖框配件颜色4' ): Result = c4    return Resultdef GetPanelBomdata(bomclass, mat, color, color2, color3, pnll, pnlh):    result = {}    for i in range(0, len(mPanelBomDetailList)):        p = mPanelBomDetailList[i]        if ((p['bomclass'] == bomclass) and (float(p['lmin']) < float(pnll)) and (float(p['lmax']) >= float(pnll)) and (                float(p['hmin']) < float(pnlh)) and (float(p['hmax']) >= float(pnlh))):            result = p    return resultdef GetWjBomDetaildata(myversion, wjname, skcolor1, skcolor2, skcolor3, skcolor4):    result = {}    pa = {}    for m in range(0 , len(mSlidingWjBomDetailList)):        pbomdetail = mSlidingWjBomDetailList[m]        if pbomdetail['bomname'] == wjname :            pa = getdata(myversion, pbomdetail['name'], GetSlidingAccessory)            if pa:                color = ToColor(pa['color'], skcolor1, skcolor2, skcolor3, skcolor4)                Add2SlidingConfig('SlidingAccessory', pa)                pcolorclass = GetSlidingColorClass('配件', pa['name'], color)                Add2SlidingConfig('SlidingColorClass', pcolorclass)    return resultdef GetDataValue(data,SubMXList):    xml = ''    CurcfgObj = None    cfgobj = []    ntype = ''    if (data['nType'] == 2):        if (data['direc'] == 1):            xml = Sliding['SfgParam']['HTxml']            cfgobj = HCfgobj2            ntype = 'Hfg2'            config['tmconfig']['SfgParam']['HTxml'] = xml            config['tmconfig']['Hfg2'] = []        else :            xml = Sliding['SfgParam']['Txml']            cfgobj = Cfgobj2            config['tmconfig']['SfgParam']['Txml'] = xml            config['tmconfig']['Sfg2'] = []            ntype = 'Sfg2'    if (data['nType'] == 3):        if (data['direc'] == 1):            xml = Sliding['SfgParam']['HSxml']            cfgobj = HCfgobj3            config['tmconfig']['SfgParam']['HSxml'] = xml            config['tmconfig']['Hfg3'] = []            ntype = 'Hfg3'        else:            xml = Sliding['SfgParam']['Sxml']            cfgobj = Cfgobj3            config['tmconfig']['SfgParam']['Sxml'] = xml            config['tmconfig']['Sfg3'] = []            ntype = 'Sfg3'    if (data['nType'] == 4):        if (data['direc'] == 1):            xml = Sliding['Sfg_Param']['HFxml']            cfgobj = HCfgobj4            config['tmconfig']['SfgParam']['HFxml'] = xml            config['tmconfig']['Hfg4'] = []            ntype = 'Hfg4'        else:            xml = Sliding['Sfg_Param']['Fxml']            cfgobj = Cfgobj4            config['tmconfig']['SfgParam']['Fxml'] = xml            config['tmconfig']['Sfg4'] = []            ntype = 'Sfg4'    bfind = False    for i in range(0, len(cfgobj)):        if (data['name'] == cfgobj[i][u'适配竖中横']):            CurcfgObj = cfgobj[i]            Add2SlidingConfig(ntype, CurcfgObj)            bfind = True            break    if (not bfind): #// 没有对应的模板公式。        outobj = {        "xml": xml,        "CurcfgObj": None,        "cSBoxp": None        }        return outobj    #u'根据竖中横名称 - - 查询对应竖中横的3个变量的值'    SHBoxParamFalg ='SHBoxParam'    JSBoxp = SHBoxParam   #竖中横框参数表    if (data['direc'] == 1):        SHBoxParamFalg = 'HSHBoxParam'        JSBoxp = HSHBoxParam #// 横中横框参数    cSBoxp = ''    for i in range(0, len(JSBoxp)):        if (data['name'] == JSBoxp[i]['name']): #// 找到竖中横表中对应的中横参数            cSBoxp = JSBoxp[i]            Add2SlidingConfig(SHBoxParamFalg, cSBoxp)            break    returndef GetBomObj(data):    def GetSheetOject(bktype, listtype):        for i in range(0, len(listtype)):            if(bktype == listtype[i]['bktype']):                Add2SlidingConfig('mDoorPanelTypeList', listtype[i])    SubMXList = []    GetDataValue(data, SubMXList)    # data是竖格门芯字段    GetSheetOject(data[u'边框类型'], PanelTypeList)    returndef gettmconfig(myversion, xmltemplate):    root = ET.fromstring(xmltemplate)    attri = root.get('门洞宽', '0')    mL = int(attri)    attri = root.get('门洞高', '0')    mH = int(attri)    attri = root.get('延长导轨','0')    mAddLength = int(attri)    attri = root.get('单门数量类型', '')    pexp = getdata(myversion+'单门数量类型', attri, GetSlidingExp)    Add2SlidingConfig('SlidingExp', pexp)    attri = root.get('门类型','')    pstype = getdata(myversion+'门类型', attri, GetSlidingType)    Add2SlidingConfig('SlidingType', pstype)    attri = root.get('边框类型', '')    psp = getdata(myversion+'边框类型', attri, GetSlidingParam)    Add2SlidingConfig('SlidingParam', psp)    attri = root.get('上下横框类型', '')    pudbox = getdata(myversion+'上下横框类型', attri, GetUDBoxParam)    Add2SlidingConfig('UDBoxParam', pudbox)    attri = root.get('上下轨类型', '')    ptrack = getdata(myversion+'上下轨类型', attri, GetTrackParam)    ## ('attri=',attri,'ptrack=',ptrack)    Add2SlidingConfig('TrackParam', ptrack)    attri = root.get('中横框类型', '')    phbox = getdata(myversion+'中横框类型', attri, GetSlidingHBoxParam)    Add2SlidingConfig('HboxParam', phbox)    pvbox = {}    if psp:        pvbox = getdata(myversion, psp['vboxtype'], GetVBoxParam)    Add2SlidingConfig('VBoxParam', pvbox)    attri = root.get('门板类型', '')    if attri:        mMyPanelType = attri    else:        mMyPanelType = ''    attri = root.get('门颜色', '')    if attri:        mMySlidingColor = attri    else:        mMySlidingColor = ''    attri = root.get('竖框颜色','')    if attri  : mMyVBoxColor = attri    else: mMyVBoxColor = ''    attri = root.get('上横框颜色', '')    if attri:        mMyUpBoxColor = attri    else:        mMyUpBoxColor = ''    attri = root.get('下横框颜色', '')    if attri:        mMyDownBoxColor = attri    else:        mMyDownBoxColor = ''    attri = root.get('上轨颜色', '')    if attri  : mMyUpTrackColor = attri    else:  mMyUpTrackColor =''    attri = root.get('下轨颜色', '')    if attri:        mMyDownTrackColor = attri    else:        mMyDownTrackColor = ''    attri = root.get('中横框颜色', '')    if attri:        mMyHBoxColor = attri    else:        mMyHBoxColor = ''    attri = root.get('门板颜色', '')    if attri:        mMyPanelColor = attri    else:        mMyPanelColor = ''    mDataMode = int(root.get('DataMode', '0'))    mGridItem = 0    attri = root.get('均分')    if attri != None: mGridItem = int(attri)    if (pexp =={}) or (pstype == {}) or (psp == {}) or (pudbox =={}) \        or (ptrack == {}) or (phbox =={}) or (pvbox == {}):        return    nHasMzhb = False #门转换表    mSlidingExp = pexp    mSlidingParam = psp    mSlidingType = pstype    mTrackParam = ptrack    UDBoxParam = pudbox    HBoxParam = phbox    VBoxParam = pvbox    mDoorsList = []    m = -1    for i in range(0, len(root)):        node = root[i]        if node.tag !='单门': continue        m = m+1        door = TDoorRect()        mDoorsList.append(door)        attri = node.get('宽')        door.doorw = float(attri)        attri = node.get('高')        door.doorh = float(attri)        attri = node.get('X0')        door.x0 = float(attri)        attri = node.get('Y0')        door.y0 = float(attri)        attri = node.get('竖框类型')        pvbox = GetVBoxParam(attri)        if pvbox: door.mVBoxParam = pvbox        attri = node.get('竖框颜色')        door.mVBoxColor = attri        attri = node.get('上下横框类型')        pudbox = GetUDBoxParam(attri)        if pudbox: door.mUDBoxParam = pudbox        for j in range(0, len(node)):            cnode = node[j]            if cnode.tag != '中横框' : continue            rb = DoorRectBox()            door.boxlist.append(rb)            attri = cnode.get('类型')            rb.boxtype = attri            attri = cnode.get('颜色')            rb.color = attri            rb.vh = True            attri = cnode.get('vh')            if attri == 'False' : rb.vh = False            attri = cnode.get('w0')            rb.w0 = float(attri)            attri = cnode.get('h0')            rb.h0 = float(attri)            attri = cnode.get('x0')            rb.x0 = float(attri)            attri = cnode.get('y0')            rb.y0 = float(attri)            attri = cnode.get('d0')            rb.d0 = float(attri)            attri = cnode.get('w1')            rb.w1 = float(attri)            attri = cnode.get('h1')            rb.h1 = float(attri)            attri = cnode.get('x1')            rb.x1 = float(attri)            attri = cnode.get('y1')            rb.y1 = float(attri)            attri = cnode.get('d1')            rb.d1 = float(attri)            attri = cnode.get('w2')            rb.w2 = float(attri)            attri = cnode.get('h2')            rb.h2 = float(attri)            attri = cnode.get('x2')            rb.x2 = float(attri)            attri = cnode.get('y2')            rb.y2 = float(attri)            attri = cnode.get('d2')            rb.d2 = float(attri)        for j in range(0, len(node)):            cnode = node[j]            if cnode.tag != '门板' : continue            pnl = RectPanel()            pnl.selected = False            door.panellist.append(pnl)            attri = cnode.get('类型')            pnl.PanelType = attri            attri = cnode.get('颜色')            pnl.color = attri            attri = cnode.get('颜色2')            if attri: pnl.color2 = attri            attri = cnode.get('纹路')            pnl.direct = attri            attri = cnode.get('备注')            if attri:                pnl.memo = attri            attri = cnode.get('ExtraData')            if attri:                pnl.extradata = attri            attri = cnode.get('w0')            pnl.w0 = float(attri)            attri = cnode.get('h0')            pnl.h0 = float(attri)            attri = cnode.get('x0')            pnl.x0 = float(attri)            attri = cnode.get('y0')            pnl.y0 = float(attri)            attri = cnode.get('d0')            pnl.d0 = float(attri)            attri = cnode.get('w1')            pnl.w1 = float(attri)            attri = cnode.get('h1')            pnl.h1 = float(attri)            attri = cnode.get('x1')            pnl.x1 = float(attri)            attri = cnode.get('y1')            pnl.y1 = float(attri)            attri = cnode.get('d1')            pnl.d1 = float(attri)            attri = cnode.get('w2')            pnl.w2 = float(attri)            attri = cnode.get('h2')            pnl.h2 = float(attri)            attri = cnode.get('x2')            pnl.x2 = float(attri)            attri = cnode.get('y2')            pnl.y2 = float(attri)            attri = cnode.get('d2')            pnl.d2 = float(attri)    skcolor1, skcolor2, skcolor3, skcolor4 = '', '' ,'', ''    if len(mDoorsList) > 0:        door = mDoorsList[0]        pcolorclass = GetSlidingColorClass('竖框', mSlidingParam['vboxtype'], door.mVBoxColor)        if pcolorclass:            Add2SlidingConfig('SlidingColorClass', pcolorclass)            skcolor1 = pcolorclass['skcolor1']            skcolor2 = pcolorclass['skcolor2']            skcolor3 = pcolorclass['skcolor3']            skcolor4 = pcolorclass['skcolor4']    #(mTrackParam)    if (mDataMode==0) and (mTrackParam['wlupcode'] != ''):        pcolorclass = GetSlidingColorClass('上轨', mTrackParam['upname'], mMyUpTrackColor)        if pcolorclass: Add2SlidingConfig('SlidingColorClass', pcolorclass)    if (mDataMode==0) and (mTrackParam['wldncode'] != ''):        pcolorclass = GetSlidingColorClass('上轨', mTrackParam['dnname'], mMyDownTrackColor)        if pcolorclass: Add2SlidingConfig('SlidingColorClass', pcolorclass)    #趟门关联五金    wjname = mSlidingParam['wjname']    if (mDataMode==0) and (wjname != ''):        pbomdetail = GetWjBomDetaildata(myversion, wjname, skcolor1, skcolor2, skcolor3, skcolor4)        Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)    #上轨五金    if (mDataMode==0) and (mTrackParam['wjname1'] != ''):        pbomdetail = GetWjBomDetaildata(myversion, mTrackParam['wjname1'], skcolor1, skcolor2, skcolor3, skcolor4)        Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)    #下轨五金    if (mDataMode==0) and (mTrackParam['wjname2'] != ''):        pbomdetail = GetWjBomDetaildata(myversion, mTrackParam['wjname2'], skcolor1, skcolor2, skcolor3, skcolor4)        Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)    #竖框    for i in range(0, len(mDoorsList)):        if (mDataMode==1) : break        door = mDoorsList[i]        pvbox = GetVBoxParam(door.mVBoxParam['name'])        if pvbox:            Add2SlidingConfig('VBoxParam', pvbox)  #竖框参数        pcolorclass = GetSlidingColorClass('竖框', door.mVBoxColor)        Add2SlidingConfig('SlidingColorClass', pcolorclass)        if door.mVBoxParam['wjname'] != '':            pbomdetail = GetWjBomDetaildata(myversion, door.mVBoxParam['wjname'], skcolor1, skcolor2, skcolor3, skcolor4)            Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)    # 上下横框    for i in range(0, len(mDoorsList)):        if (mDataMode == 1): break        door = mDoorsList[i]        pcolorclass = GetSlidingColorClass('上横框', mMyUpBoxColor)        Add2SlidingConfig('SlidingColorClass', pcolorclass)        pcolorclass = GetSlidingColorClass('下横框', mMyDownBoxColor)        Add2SlidingConfig('SlidingColorClass', pcolorclass)        #上横框五金        if door.mUDBoxParam['wjname1'] != '':            pbomdetail = GetWjBomDetaildata(myversion, door.mUDBoxParam['wjname1'], skcolor1, skcolor2, skcolor3, skcolor4)            Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)        #下横框五金        if door.mUDBoxParam['wjname2'] != '':            pbomdetail = GetWjBomDetaildata(myversion, door.mUDBoxParam['wjname2'], skcolor1, skcolor2, skcolor3, skcolor4)            Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)        for j in range(0, len(door.panellist)):            pnl = door.panellist[j]            pnltype = GetSlidingPanelType(mSlidingParam['name'], pnl.PanelType)    for i in range(0, len(mDoorsList)):        if (mDataMode == 1): break        door = mDoorsList[i]        for j in range(0, len(door.boxlist)):            rb = door.boxlist[j]            if rb.h0 <= 0 : continue            phbox = GetSlidingHBoxParam(rb.boxtype)            Add2SlidingConfig('HBoxParam', phbox)            pcolorclass = GetSlidingColorClass('中横框', rb.color)            Add2SlidingConfig('SlidingColorClass', pcolorclass)            if phbox['wjname'] != '':                pbomdetail = GetWjBomDetaildata(myversion, phbox['wjname'], skcolor1, skcolor2, skcolor3, skcolor4)                Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)    for i in range(0, len(mDoorsList)):        if (mDataMode == 1): break        door = mDoorsList[i]        for j in range(len(door.panellist)):            pnl = door.panellist[j]            if (pnl.extradata!='' and len(pnl.extradata) > 5): #有竖格门芯再此 从门板中ExtraData字段提取竖格门芯                #门类型数据                #提取竖格门芯                sJson = pnl.extradata                sJson = sJson.replace('^', '"')                Jsonvar = json.loads(sJson)                Jsonvar['L'] = pnl.w1                Jsonvar['H'] = pnl.h1                FGObj = GetBomObj(Jsonvar)                # 门类型数据、门板附加物料、颜色分类.cfg、五金配件分类数据.cfg、五金配件.cfg'                for pcolorclass in mSlidingColorClassList:                    Add2SlidingConfig('SlidingColorClass', pcolorclass)                for pnltype in PanelTypeList:                    Add2SlidingConfig('PanelType', pnltype)    #门板类型                for pnlbomdetail in mPanelBomDetailList:       #门板附加物料                    Add2SlidingConfig('PanelBomDetail', pnlbomdetail)                for pbomdetail in mSlidingWjBomDetailList:                    Add2SlidingConfig('SlidingWjBomDetail', pbomdetail) #五金配件分类数据.cfg                for pa in mSlidingAccessoryList:                    Add2SlidingConfig('SlidingAccessory', pa)                # FGObj = GetBomObj(Jsonvar)    #处理竖格门芯的                #                #                #                #                # # 门类型数据、门板附加物料、颜色分类.cfg、五金配件分类数据.cfg、五金配件.cfg'                #                # for fg in range(0, len(FGObj['CurcfgObj'][u'门芯列表2'])):                #                #     oneMxs = FGObj['CurcfgObj'][u'门芯列表2'][fg]                #                #     if ('subtobj' in oneMxs and len(json.dumps(oneMxs['subtobj'])) > 5):                #                #         for subfg in range(0, len(oneMxs['subtobj']['CurcfgObj'][u'门芯列表2'])):                #                #             subMxs = oneMxs['subtobj']['CurcfgObj'][u'门芯列表2'][subfg]                #             newMx = {                #                 'd0': eval(subMxs[u'深'])                #                 , 'd1': eval(subMxs[u'深'])                #                 , 'd2': eval(subMxs[u'深'])                #                 , 'h0': eval(subMxs[u'高'])                #                 , 'h1': eval(subMxs[u'高'])                #                 , 'h2': eval(subMxs[u'高'])                #                 , 'w0': eval(subMxs[u'宽'])                #                 , 'w1': eval(subMxs[u'宽'])                #                 , 'w2': eval(subMxs[u'宽'])                #                 , 'x0': eval(subMxs['x'])                #                 , 'x1': eval(subMxs['x'])                #                 , 'x2': eval(subMxs['x'])                #                 , 'y0': eval(subMxs['y'])                #                 , 'y1': eval(subMxs['y'])                #                 , 'y2': eval(subMxs['y'])                #                 , u'备注': ""                #                 , u'类型': subMxs[u'材料']                #                 , u'纹路': subMxs['direct2']                #                 , u'颜色': subMxs[u'颜色']                #                 , u'颜色2': ""                #             }                #             if (subMxs[u'名称'].find(u'门芯') == 0):                #                #                 newMx['PanelNum'] = pnl['PanelNum']                #                 # 根据门芯的物料尺寸 - 门芯的进槽值  = 门芯的见光尺寸                #                 lObj = ResetSubMxSize(mGridItem, j, fg, subfg, FGObj, Jsonvar, door['mUDBoxParam'],                #                                       door['mVBoxParam'])                #                 newMx['h0'] = newMx['h0'] - lObj['ch0']                #                 newMx['w0'] = newMx['w0'] - lObj['cw0']                #                 AddOneMx(i, door, j, newMx, nHasMzhb)                #                 print('AddOneMx1', len(ALLlist))                #             else:                #                 # // 竖中横的 高 ：物料尺寸不根据 模板公式来计算，直接为其图像尺寸                #                 # // 门芯尺寸- 竖时为其  门芯尺寸 - 上下横框进槽值，                #                 # // 门均分数，最外层是第几门芯，第二次是第几个门芯，最后的是第几个门芯                #                 relength = ResetMBoxSize(mGridItem, j, fg, subfg, FGObj, Jsonvar,                #                                          door['mUDBoxParam'],                #                                          door['mVBoxParam'])                #                #                 newMx['h0'] = eval(oneMxs[u'高']) - relength                #                 newMx['h1'] = eval(oneMxs[u'高'])                #                 newMx['h2'] = eval(oneMxs[u'高'])                #                 nType = 1                #                 if (oneMxs['subtobj']['CurcfgObj']['direc'] == 1):                #                     nType = 2  # // 横切                #                     newMx['h0'] = eval(oneMxs[u'宽']) - relength                #                     newMx['h1'] = eval(oneMxs[u'宽'])                #                     newMx['h2'] = eval(oneMxs[u'宽'])                #                #                 addBox(newMx, door, i, nType)                #                 print('addBox', len(ALLlist))                #     else:                #         if u'材料' not in oneMxs: oneMxs[u'材料'] = ''                #         if 'direct2' not in oneMxs: oneMxs[u'direct2'] = ""                #         if u'颜色' not in oneMxs: oneMxs[u'颜色'] = ""                #         newMx = {                #             'd0': eval(str(oneMxs[u'深']))                #             , 'd1': eval(str(oneMxs[u'深']))                #             , 'd2': eval(str(oneMxs[u'深']))                #             , 'h0': eval(str(oneMxs[u'高']))                #             , 'h1': eval(str(oneMxs[u'高']))                #             , 'h2': eval(str(oneMxs[u'高']))                #             , 'w0': eval(str(oneMxs[u'宽']))                #             , 'w1': eval(str(oneMxs[u'宽']))                #             , 'w2': eval(str(oneMxs[u'宽']))                #             , 'x0': eval(str(oneMxs[u'x']))                #             , 'x1': eval(str(oneMxs[u'x']))                #             , 'x2': eval(str(oneMxs[u'x']))                #             , 'y0': eval(str(oneMxs[u'y']))                #             , 'y1': eval(str(oneMxs[u'y']))                #             , 'y2': eval(str(oneMxs[u'y']))                #             , u'备注': ""                #             , u'类型': oneMxs[u'材料']                #             , u'纹路': oneMxs['direct2']                #             , u'颜色': oneMxs[u'颜色']                #             , u'颜色2': ""                #         }                #         if (oneMxs[u'名称'].find(u'门芯') == 0):                #             if 'PanelNum' not in pnl:                #                 pnl['PanelNum'] = 0                #                #             newMx['PanelNum'] = pnl['PanelNum']                #             # 根据门芯的物料尺寸 - 门芯的进槽值  = 门芯的见光尺寸                #             lObj = ResetMxSize(mGridItem, j, fg, FGObj, Jsonvar, door['mUDBoxParam'],                #                                door['mVBoxParam'])                #             newMx['h0'] = newMx['h0'] - lObj['ch0']                #             newMx['w0'] = newMx['w0'] - lObj['cw0']                #             AddOneMx(i, door, j, newMx, nHasMzhb)                #                #         else:                #             # // 竖中横的 高 ：物料尺寸不根据 模板公式来计算，直接为其图像尺寸                #             # // 门芯尺寸- 竖时为其  门芯尺寸 - 上下横框进槽值，                #             # // 门均分数，最外层是第几门芯，第二次是第几个门芯，最后的是第几个门芯                #             if 'h0' not in pnl: pnl['h0'] = ''                #             if 'w0' not in pnl: pnl['w0'] = ''                #             newMx['h0'] = pnl['h0']                #             newMx['h1'] = pnl['h0']                #             newMx['h2'] = pnl['h0']                #             nType = 1                #             if (FGObj['CurcfgObj']['direc'] == 1):                #                 nType = 2  # // 横切                #                 newMx['h0'] = pnl['w0']                #                 newMx['h1'] = pnl['w0']                #                 newMx['h2'] = pnl['w0']                #             addBox(newMx, door, i, nType)                #             print('addBox3', len(ALLlist))            pnltype = GetSlidingPanelType(mSlidingParam['name'], pnl.PanelType)            if (pnltype):                Add2SlidingConfig('PanelType', pnltype)                pnlbomdetail = GetPanelBomdata(pnltype['slaVe'],pnl.PanelType, pnl.color, pnl.color2,door.mVBoxColor, pnl.w1, pnl.h1)                Add2SlidingConfig('PanelBomDetail', pnlbomdetail) #门板附加物料            pssexp = getdata(myversion, pnl.PanelType, GetSlidingSSExp)            Add2SlidingConfig('SSExp', pssexp)            pcolorclass = GetSlidingColorClass('门板', pnl.PanelType, pnl.color)            if pcolorclass: Add2SlidingConfig('SlidingColorClass', pcolorclass)            #添加门板的关联五金            if (pnltype) and (pnltype['wjname'] !=''):                pbomdetail = GetWjBomDetaildata(myversion, pnltype['wjname'], skcolor1, skcolor2, skcolor3, skcolor4)                Add2SlidingConfig('SlidingWjBomDetail', pbomdetail)##########################################################################################掩门def GetDoorsExp(name):    Result = {}    for i in range(0, len(mExpList)):        if (mExpList[i]['name'] == name):            Result = mExpList[i]    return Result# 门类型def GetDoorsType(name):    Result = {}    for i in range(0, len(mTypeList)):        if (mTypeList[i]['name'] == name):            Result = mTypeList[i]    return Result# 掩门参数def GetDoorsParam(name1, name2):    Result = {}    for i in range(0, len(mParamList)):        if (mParamList[i]['name'] == name2 and mParamList[i]['DoorsType'] == name1):            Result = mParamList[i]    return Result# 中横框类型def GetHBoxParam(name):    Result = {}    for i in range(0, len(mDoorHBoxParamList)):        if (mDoorHBoxParamList[i]['name'] == name):            Result = mDoorHBoxParamList[i]    return Result# 拉手def GetDoorsHandle(name):    Result = {}    for i in range(0, len(mHandleList)):        if (mHandleList[i]['name'] == name):            Result = mHandleList[i]    return Result# 门铰def GetDoorsHinge(mj, dt):    Result = None    if (not dt):  return Result    if (mj == ''): return Result    for i in range(0, len(mHingeList)):        p = mHingeList[i]        if (p['name'] == mj):            Result = p            break    return Resultdef GetDoorsCurHinge(mj, mHinge):    Result = None    if (mj == ''): return Result    #print ('len of mCurHingeList=',len(mCurHingeList),'mj=',mj, 'mHinge=',mHinge)    for i in range(0, len(mCurHingeList)):        p = mCurHingeList[i]        if (p['name'] == mj):            if p['hingetype'] == mHinge:                Result = p                break    return Result# 百叶板配置def GetWjBom(name):    Result = {}    for i in range(len(mWJBomList)):        pwjbom = mWJBomList[i]        if (pwjbom['name'] == name):            Result = pwjbom    return Resultdef GetDoorAccessory(name):    Result = {}    for i in range(len(mAccessoryList)):        pa = mAccessoryList[i]        if (pa['name'] == name):            Result = pa    return Resultdef GetColorClass(myclass, color):    Result = {}    for i in range(len(mColorClassList)):        p = mColorClassList[i]        if (p['myclass'] == myclass and p['color'] == color):            Result = p    return Resultdef GetColorClass2(bktype, color):    Result = {}    for i in range(len(mColorClass2List)):        pa = mColorClass2List[i]        if (pa['bktype'] == bktype and pa['color'] == color):            Result = pa    return Resultdef GetDoorPanelType(bktype, name):    Result = {}    for i in range(len(mDoorPanelTypeList)):        p = mDoorPanelTypeList[i]        if (p['name'] == name and p['bktype'] == '*'):            Result = p            return Result        if (p['name'] == name and p['bktype'] == bktype):            Result = p            return Result    return Resultdef GetDoorSSExp(name):    Result = {}    for i in range(0, len(mShutterExpList)):        if (mShutterExpList[i]['paneltype'] == name):            Result = mShutterExpList[i]    return Resultdef GetSSExp(name):    Result = {}    for i in range(0, len(mShutterExpList)):        if (mShutterExpList[i]['paneltype'] == name):            Result = mShutterExpList[i]    return Resultdef returnxml(string):    p = {}    for i in range(0, len(mDoorXMLList)):        p = mDoorXMLList[i]        if (string == p['name']):            break    return pdef getdata(rootname, attri, func):    status, result = returnresdata(rootname + attri)    if status:        #(rootname + attri, result)        #('status', True)        mPExp = result        #('123',mPExp)    else:        #('status', False)        mPExp = func(attri)  # 单门数量类型        r.set(rootname + attri, json.dumps(mPExp, ensure_ascii=False).encode('utf8'))    return mPExpdef getymconfig(myversion, xmltemplate):    '''    :param rootname: 工厂数据id    :param xmltemplate: xml    :return: config 配置数据    :已缓存 单门数量类型、门类型、门框类型、中横框类型、拉手、门铰、单门类型、mDoorHBoxParamList    '''    root = ET.fromstring(xmltemplate)    # 单门数量类型    attri = root.get('单门数量类型', '')    mPExp = getdata(myversion, attri, GetDoorsExp)    #(mPExp)    Add2Config('mExpList', mPExp)    # 单门数量类型    mentype = root.get('门类型', '')    mPType = getdata(myversion, mentype, GetDoorsType)    Add2Config('mTypeList', mPType)    attri = root.get('门框类型', '')    status, result = returnresdata(myversion+mentype + attri)    if status:        #(myversion+ attri, result)        #('status', True)        mPParam = result    else:        #('status', False)        mPParam = GetDoorsParam(mentype, attri)  # 单门数量类型        r.set(myversion+ mentype + attri, json.dumps(mPParam, ensure_ascii=False).encode('utf8'))    Add2Config('mParamList', mPParam)    mMyVBoxColor = root.get('门框颜色', '')    #中横框类型    attri = root.get('中横框类型', '')    mPHBoxParam = getdata(myversion, attri, GetHBoxParam)    Add2Config('mDoorHBoxParamList', mPHBoxParam)    mGridItem = root.get('均分', '0')    mDataMode = int(root.get('DataMode', '0'))    if (mPExp == {}) or (mPType == {}) or (mPParam == {}):        mCopyDoor = -1        return    mIsVertical = False    attri = root.get('是否竖排',False)    if (attri != None) and (attri == 'True') :        mIsVertical = True    m = -1    mDoorsList = []    for i in range(0, len(root)):        node = root[i]        if (node.tag != '单门'): continue        m = m + 1        door = TDoorDoorRect()        mDoorsList.append(door)        door.mPParam = mPParam        door.mHandle = node.get('拉手', '')        door.mOpenDirect = node.get('打开方向', '')        door.mHinge = node.get('门铰', '')        door.mHingeHoleExtra = node.get('HingeHoleExtra', '')        for j in range(0, len(node)):            cnode = node[j]            if cnode.tag != '门芯' : continue            pnl = DoorRectPanel()            door.panellist.append(pnl)            pnl.PanelType = cnode.get('类型', '')            pnl.color = cnode.get('颜色', '')            pnl.color2 = cnode.get('颜色2', '')            attri = cnode.get('w1', '0')            pnl.w1 = float(attri)            attri = cnode.get('h1', '0')            pnl.h1 = float(attri)        #中横框        for i in range(0, len(node)):            cnode = node[i]            if (cnode.tag != '中横框'): continue            rb = DoorRectBox()            rb.selected = False            door.boxlist.append(rb)            attri = cnode.get('类型', '0')            rb.boxtype = attri            attri = cnode.get('颜色', '0')            rb.color = attri    for i in range(0, len(mDoorsList)):        door = mDoorsList[i]        bh = Delphi_Round(mPType['depth'])        INFO.debug('拉手=' + door.mHandle)        #拉手        phandle = getdata(myversion, door.mHandle, GetDoorsHandle)        if phandle:            Add2Config('mHandleList', phandle)  # 拉手            AddmWJBomDetailList(myversion, phandle['wjname'], bh, door.mOpenDirect, mPParam['name'])        #('门铰=' + door.mHinge)        if door.mHingeHoleExtra and len(door.mHingeHoleExtra) > 5:            sJson = door.mHingeHoleExtra.replace('^', '"')            data = json.loads(sJson)            if '门铰' in data:                menjiao = data['门铰']                for i in range(0, len(menjiao)):                    if '门铰类型' in menjiao[i]:                        status, result = returnresdata(myversion + 'mCurHinge' + mentype + door.mHinge + menjiao[i]['门铰类型'])                        if status:                            pcurhinge = result                        else:                            pcurhinge = GetDoorsCurHinge(menjiao[i]['门铰类型'], door.mHinge)                        if pcurhinge:                            Add2Config('mCurHingeList', pcurhinge)                            r.set(myversion + 'mCurHinge' + mentype + door.mHinge+ menjiao[i]['门铰类型'],                                  json.dumps(pcurhinge, ensure_ascii=False).encode('utf8'))        else:            INFO.debug('门铰=' + door.mHinge)            status, result = returnresdata(myversion+'mHinge'+mentype + door.mHinge)            #('3phinge=', myversion +mentype + door.mHinge)            if status:                phinge = result            else:                phinge = GetDoorsHinge(door.mHinge, mPType)  # 单门数量类型                r.set(myversion+'mHinge'+ mentype + door.mHinge, json.dumps(phinge, ensure_ascii=False).encode('utf8'))            if phinge:                Add2Config('mHingeList', phinge)  # 门铰                AddmWJBomDetailList(myversion, phinge['wjname'], bh, door.mOpenDirect, mPParam['name'])        if (mPType['isframe']):            #门芯            for j in range(0, len(door.panellist)):                pnl = door.panellist[j]                #GetDoorPanelType                status, result = returnresdata(myversion +mPParam['name']+ pnl.PanelType)                if status:                    #(myversion + door.mHinge, result)                    #('status', True)                    pnltype = result                else:                    #('status', False)                    pnltype = GetDoorPanelType(mPParam['name'], pnl.PanelType)  # 单门数量类型                    r.set(myversion +mPParam['name']+ pnl.PanelType, json.dumps(pnltype, ensure_ascii=False).encode('utf8'))                Add2Config('mDoorPanelTypeList', pnltype)                if pnltype:                    AddDoorPanelBomDetailList(pnltype['panelbom'], pnl.PanelType, pnl.color, pnl.color2, mMyVBoxColor,                                pnl.w1, pnl.h1)                INFO.debug('门芯类型=' + pnl.PanelType)                pssexp = getdata(myversion, pnl.PanelType, GetDoorSSExp)                Add2Config('mShutterExpList', pssexp)  #百叶板配置                INFO.debug('颜色=' + pnl.color)                status, result = returnresdata(myversion + '门芯' + pnl.color)                if status:                    #(myversion + '门芯' + pnl.color, result)                    #('status', True)                    pcolorclass = result                else:                    #('status', False)                    pcolorclass = GetColorClass('门芯', pnl.color)  # 单门数量类型                    r.set(myversion + '门芯' + pnl.color, json.dumps(pcolorclass, ensure_ascii=False).encode('utf8'))                Add2Config('mColorClassList', pcolorclass)  # 颜色分类 门芯颜色            #中横框            for j in range(0, len(door.boxlist)):                rb = door.boxlist[j]                boxtype = rb.boxtype                hbox = getdata(myversion, boxtype, GetHBoxParam)                Add2Config('mDoorHBoxParamList', hbox)                wjname = hbox['wjname']                AddmWJBomDetailList(myversion, wjname, bh, door.mOpenDirect,  mPParam['name'])        else:            if ( len(door.panellist) > 0 ):                pnl = door.panellist[0]                pnltype = GetDoorPanelType(mPParam['name'], pnl.PanelType)                if ( pnltype ):  bh = pnltype['thick']            for j in range(0, len(door.panellist)):                pnl = door.panellist[j]                status, result = returnresdata(myversion + mPParam['name'] + pnl.PanelType)                if status:                    #(myversion + door.mHinge, result)                    #('status', True)                    pnltype = result                else:                    #('status', False)                    pnltype = GetDoorPanelType(mPParam['name'], pnl.PanelType)  # 单门数量类型                    r.set(myversion + mPParam['name'] + pnl.PanelType,                          json.dumps(pnltype, ensure_ascii=False).encode('utf8'))                Add2Config('mDoorPanelTypeList', pnltype)                if pnltype:                    AddDoorPanelBomDetailList(pnltype['panelbom'], pnl.PanelType, pnl.color, pnl.color2, mMyVBoxColor,                                pnl.w1, pnl.h1)                INFO.debug('门芯类型=' + pnl.PanelType)                pssexp = getdata(myversion, pnl.PanelType, GetDoorSSExp)                Add2Config('mShutterExpList', pssexp)  # 百叶板配置                INFO.debug('颜色=' + pnl.color)                status, result = returnresdata(myversion + '门芯' + pnl.color)                if status:                    #(myversion + '门芯' + pnl.color, result)                    #('status', True)                    pcolorclass = result                else:                    #('status', False)                    pcolorclass = GetColorClass('门芯', pnl.color)  # 单门数量类型                    r.set(myversion + '门芯' + pnl.color,json.dumps(pcolorclass, ensure_ascii=False).encode('utf8'))                Add2Config('mColorClassList', pcolorclass)  # 颜色分类 门芯颜色    status, result = returnresdata(myversion + mPParam['name'] + mMyVBoxColor)    if status:        pcolorclass2 = result    else:        #('status', False)        pcolorclass2 = GetColorClass2(mPParam['name'], mMyVBoxColor)  # 单门数量类型        r.set(myversion + mPParam['name'] + mMyVBoxColor,json.dumps(pcolorclass2, ensure_ascii=False).encode('utf8'))    Add2Config('mColorClass2List', pcolorclass2)  # 颜色分类2  门框颜色    if (mDataMode == 0):        wjname = mPParam['wjname']        door_bh, opendirect, bktype = 0, '', mPParam['name']        AddmWJBomDetailList(myversion, wjname, door_bh, opendirect, bktype)    left_doorxml = mPParam['left_doorxml']    pxml = returnxml(left_doorxml)    Add2Config('mDoorXMLList', pxml)    right_doorxml = mPParam['right_doorxml']    pxml = returnxml(right_doorxml)    Add2Config('mDoorXMLList', pxml)    doorxml = mPParam['doorxml']    pxml = returnxml(doorxml)    Add2Config('mDoorXMLList', pxml)def ExtractFileExt(filename):    '''        :param filename: '123.txt'        :return: .txt        '''    return filename[filename.index('.'):]def ImportCloneItemForBom(Var, program_str, clone_oi, clonenode, param):    def trim(S):        L = len(S)        I = 0        while (I < L) and (S[I] <= ' '): I = I+1        if I >= L : Result =''        else:            while S[L-1] <= ' ':                L = L - 1        Result = S[I: L]        return Result    def S2S(string, s1, s2):        s1 = ''        s2 = ''        ws = string        n = ws.find('=')        s1 = ws[:n]        s2 = ws[n+1:]        s1 = trim(s1)        s2 = trim(s2)        s2 = s2.replace('^', ',')        return s1, s2    def UpdateAttribute(node, name, value):        attri = node.getAttribute(name)        node.setAttribute(name, value)    Result = 0    LPH = SetSysLPHValue(param['pl'], param['pd'], param['ph'])    ext = ExtractFileExt(program_str) #获取lua 后缀文件    luafile = RootPath + '\\Program\\' + program_str    if not os.path.exists(luafile):        Error.error(luafile + ' not exists!!!')    else:        obj = {'X': clone_oi.x,  # X               'Y': clone_oi.y,  # Y               'Z': clone_oi.z,  # Z               'L': clone_oi.l,  # 宽               'D': clone_oi.p,  # 深               'H': clone_oi.h,  # 高               'OZ': clone_oi.oz,  # OZ旋转               }        for i in range(16):            obj['C'+str(i)] = clone_oi.var_args[i]        if ext =='.lua':            wstr = CompileLuaProgram(obj, luafile)        else:            Error.error(luafile + ' not exists!!!')            wstr = ''        #try:        n = wstr.find(';')        while n > 0:            cnode = clonenode.cloneNode(True)            nodename = cnode.nodeName            ln = wstr[:n]            wstr = wstr[n+1:]            n = ln.find(',')            while n >0:                vstr = ln[:n]                s1 = ''                s2 = ''                s1, s2 = S2S(vstr, s1, s2)                if s1=='NN' : nodename = s2                else: UpdateAttribute(cnode, s1, s2)                ln = ln[n + 1:]                n = ln.find(',')            if (n <= 0) and (ln !=''):                s1 = ''                s2 = ''                s1, s2 = S2S(ln, s1, s2)                if s1 == 'NN':                    nodename = s2                else:                    UpdateAttribute(cnode, s1, s2)            n = wstr.find(';')            if (nodename != '板件') and (nodename != '五金') and (                    nodename != '型材五金') and (nodename != '模块') and (                    nodename != '门板'):                continue            bg = cnode.getAttribute('基础图形')            if bg == 'BG::SPACE': continue            string = cnode.getAttribute('显示方式')            if string == '3': continue            newpoi = InitBomOrderItem()            newpoi.pl = param['pl']            newpoi.pd = param['pd']            newpoi.ph = param['ph']            tmp_subspace = cnode.getAttribute('子空间')            if tmp_subspace == 'A': tmp_subspace = ''            newpoi.x = int(param['px']) + 0            newpoi.y = int(param['py']) + 0            newpoi.z = int(param['pz']) + 0            xx0 = 0            xx1 = 0            yy0 = 0            yy1 = 0            zz0 = 0            zz1 = 0            if cnode.hasAttribute('XX0'):                xx0 = int(cnode.getAttribute('XX0'))            if cnode.hasAttribute('XX1'):                xx1 = int(cnode.getAttribute('XX1'))            if cnode.hasAttribute('YY0'):                yy0 = int(cnode.getAttribute('YY0'))            if cnode.hasAttribute('YY1'):                yy1 = int(cnode.getAttribute('YY1'))            if cnode.hasAttribute('ZZ0'):                zz0 = int(cnode.getAttribute('ZZ0'))            if cnode.hasAttribute('ZZ1'):                zz1 = int(cnode.getAttribute('ZZ1'))            varstr = ''            if cnode.hasAttribute('X'):                varstr = cnode.getAttribute('X')            ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))            newpoi.lx = ToValueInt + xx0            newpoi.x = int(param['px']) + newpoi.lx            varstr = ''            if cnode.hasAttribute('Y'):                varstr = cnode.getAttribute('Y')            ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))            newpoi.ly = ToValueInt + yy0            newpoi.y = int(param['py']) + newpoi.ly            varstr = ''            if cnode.hasAttribute('Z'):                varstr = cnode.getAttribute('Z')            ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))            newpoi.lz = ToValueInt + zz0            newpoi.z = int(param['pz']) + newpoi.lz            newpoi.ox = 0            if cnode.getAttribute('OX') != '':                newpoi.ox = float(cnode.getAttribute('OX'))            newpoi.oy = 0            if cnode.getAttribute('OY') != '':                newpoi.oy = float(cnode.getAttribute('OY'))            newpoi.oz = 0            if cnode.getAttribute('OZ') != '':                newpoi.oz = float(cnode.getAttribute('OZ'))            varstr = ''            if cnode.hasAttribute('宽'):                varstr = cnode.getAttribute('宽')            ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))            newpoi.l = int(ToValueInt) + int(xx1) + (0 - int(xx0))            varstr = ''            if cnode.hasAttribute('深'):                varstr = cnode.getAttribute('深')            ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))            newpoi.p = ToValueInt + int(yy1) + (0 - int(yy0))            varstr = ''            if cnode.hasAttribute('高'):                varstr = cnode.getAttribute('高')            ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))            newpoi.h = ToValueInt + int(zz1) + (0 - int(zz0))            # 所有16个参数            args = [0] * 16            for k in range(0, 16):                args[k] = 0                string = ''                if cnode.hasAttribute(('参数' + str(k))):                    string = cnode.getAttribute(('参数' + str(k)))                if (string != ''):                    vname = ''                    value = ''                    vname, value = MyVariant(string, vname, value)                    ToValueInt = int(SetSubject(LPH, value, Var))                    args[k] = ToValueInt                    newpoi.var_args[k] = args[k]                    newpoi.var_names[k] = vname                    varstr = varstr + '+' + vname            if bg == 'BG::DOORRECT':                newpoi.l = newpoi.l + args[0] + args[1]                newpoi.h = newpoi.h + args[2] + args[3]            if bg == 'BG::BLOCK_X':                if newpoi.var_args[0] == 2:                    if newpoi.var_args[1] == 1:                        newpoi.p = Delphi_Round(math.sqrt(                            newpoi.var_args[3] * newpoi.var_args[3] + newpoi.var_args[4] * newpoi.var_args[                                4]))                    elif poi['var_args'][1] == 2:                        newpoi.l = Delphi_Round(math.sqrt(                            newpoi.var_args[3] * newpoi.var_args[3] + newpoi.var_args[4] * newpoi.var_args[                                4]))            if cnode.hasAttribute('类别'):                newpoi.desc = cnode.getAttribute('类别')            linkpath = ''            if cnode.hasAttribute('链接'):                linkpath = cnode.getAttribute('链接')            Result = Result + 1            real_l = newpoi.l            real_d = newpoi.p            if newpoi.oz == '0':                newpoi.oz = 0            if (tmp_subspace == 'L'):  # // L面空间，进行旋转计算                if (newpoi.var_args[0] == 1):                    newpoi.oz = arctan(                        (real_d - newpoi.var_args[2]) / (real_l - newpoi.var_args[1])) / pi * 180  # // 旋转角度                    newpoi.p = newpoi.var_args[3]  # // 深度                    t = sqrt((real_l - newpoi.var_args[1]) * (real_l - newpoi.var_args[1]) + (                            real_d - newpoi.var_args[2]) * (                                     real_d - newpoi.var_args[2]))                    newpoi.l = Delphi_Round(t)  # // 宽度                    newpoi.x = Delphi_Round(                        newpoi.var_args[1] - newpoi.var_args[3] * (real_d - newpoi.var_args[2]) / t)  # // x                    newpoi.y = Delphi_Round(                        real_d - newpoi.var_args[3] * (real_l - newpoi.var_args[1]) / t)  # ; // y                    if newpoi.var_args[4] != 0: newpoi.l = newpoi.var_args[4]                    newpoi.lx = newpoi.x                    newpoi.ly = newpoi.y                else:                    newpoi.oz = 0            if (tmp_subspace == 'R'):  # // R面空间，进行旋转计算                if (newpoi.var_args[0] == 1):                    newpoi.oz = -arctan(                        (real_d - newpoi.var_args[2]) / (real_l - newpoi.var_args[1])) / pi * 180  # // 旋转角度                    newpoi.p = newpoi.var_args[3]  # // 深度                    t = sqrt((real_l - newpoi.var_args[1]) * (real_l - newpoi.var_args[1]) + (                            real_d - newpoi.var_args[2]) * (                                     real_d - newpoi.var_args[2]))                    newpoi.l = Delphi_Round(t)  # // 宽度                    newpoi.x = newpoi.x + round(newpoi.var_args[3] * (                            real_d - newpoi.var_args[1]) / t)  # // x                    newpoi.y = Delphi_Round(                        newpoi.var_args[2] - newpoi.var_args[3] * (real_l - newpoi.var_args[1]) / t)  # ; // y                    if newpoi.var_args[4] != 0: newpoi.l = newpoi.var_args[4]                    newpoi.lx = newpoi.x                    newpoi.ly = newpoi.y                else:                    newpoi.oz = 0            childnum = 0            newpoi.Program = program_str            childxml = ''            if linkpath != '':                childxml = EnumXML(GetXMLByLink(linkpath))                tmpnode = Xml2ChildNodes(childxml)                if tmpnode != None:                    for ccnode in cnode.childNodes:                        cnode.removeChild(ccnode)                    cnode.appendChild(tmpnode)                else:                    if cnode.childNodes.length > 0:                        childxml = cnode.toxml('utf8')            if childxml != '':                param2 = {}                for key, value in param.items():                    param2[key] = value                param2['pname'] = newpoi.name                param2['guid'] = newpoi.guid                param2['subspace'] = newpoi.subspace                param2['xml'] = childxml                param2['pmat'] = newpoi.mat                param2['pcolor'] = newpoi.color                param2['mark'] = newpoi.mark                param2['pl'] = newpoi.l                param2['pd'] = newpoi.p                param2['ph'] = newpoi.h                param2['px'] = newpoi.x                param2['py'] = newpoi.y                param2['pz'] = newpoi.z                param2['num'] = newpoi.num                param2['parent'] = newpoi                if cnode.hasAttribute('输出类型'):                    param2['outputtype'] = cnode.getAttribute('输出类型')                child = getfirstchild(cnode)                if child:                    param2['rootnode'] = child                    param2['xdoc'] = param['xdoc']                    childnum = ImportXomItemForBom(param2)    return Result#计算尺寸def SetSysLPHValue(L,P,H):    LPH = {}    LPH['L'] = L    LPH['P'] = P    LPH['H'] = H    return LPHdef SetSysVariantValue(vname, value ,Var):    global value_lsk,value_rsk,value_zk,value_zs,value_ls,value_lg,value_ltm,value_rtm    Var[vname] = value    if vname == '$左收口宽度' : value_lsk = int(float(value))    if vname == '$右收口宽度' : value_rsk = int(float(value))    if vname == '$柱切角宽度' : value_zk = int(float(value))    if vname == '$柱切角深度' : value_zs = int(float(value))    if vname == '$梁切角深度' : value_ls = int(float(value))    if vname == '$梁切角高度' : value_lg = int(float(value))    if vname == '$左侧趟门位' : value_ltm = int(float(value))    if vname == '$右侧趟门位' : value_rtm = int(float(value))    return Vardef CompileLuaProgram(obj, program_string):    INFO.info('lua file path =' + program_string)    parmes = "CA,CB,CC,CD,CE,CF,CG,CH,CJ,CK,CL,CM,CN,CO,CP,CQ,LX,LY,LZ,LL,LD,LH,LOZ = %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d" % (        obj['C0'],        obj['C1'],        obj['C2'],        obj['C3'],        obj['C4'],        obj['C5'],        obj['C6'],        obj['C7'],        obj['C8'],        obj['C9'],        obj['C10'],        obj['C11'],        obj['C12'],        obj['C13'],        obj['C14'],        obj['C15'],        obj['X'],        obj['Y'],        obj['Z'],        obj['L'],        obj['D'],        obj['H'],        obj['OZ'])    INFO.debug('parmes=' + parmes)    # 抽盒内嵌-托底缓冲滑轨ZRG002.lua,826右斜切转角顶线.lua    executor1 = Executor(program_string, parmes)    xml = executor1.run()    if not xml: xml = ''    INFO.info('string=' + xml)    return xmldef ChangeFileExt(filename,filename2):    '''    :param filename: '123.txt'    :param filename2: '' or '.db'    :return: '123' or '123.db'    '''    if filename.find('.') == -1:        return filename + filename2    return filename[0:filename.index('.')]+filename2def GetXMLByLink(link):    Result = ''    if link=='': return ''    XSDBfile = RootPath + '\\data\\XScriptDb.mdb'    conn = pypyodbc.win_connect_mdb(r'DRIVER={Microsoft Access Driver (*.mdb  *.accbd)};DBQ=' + XSDBfile)    cur = conn.cursor()    sql = "select xml from  xml_template where path='%s'" % (link)    cur.execute(sql)    t = cur.fetchall()    if t == []:        filename = link.replace('模板目录\\', RootPath+'\\data\\')+'.xmlitem'        if os.path.exists(filename):            with open(filename,'r') as f:                xmlstring = f.read()            Result = xmlstring        else:            Error.error(filename + ',not exist!!!')    else:        xmlstr = t[0][0].replace('"', "'")        Result = xmlstr    if 'linkpath' not in luaobj:        luaobj['linkpath'] = {}    luaobj['linkpath'][link] = Result    return Resultdef EnumXML(xml):    def CreateNodeByXML(xmlfile):        if xmlfile=='' : return        DOMTree = minidom.parseString(xmlfile)        node = DOMTree.documentElement        return node    def EnumNode(blocknode):        for i in range(0, len(blocknode.childNodes)):            node = blocknode.childNodes[i]            if node.nodeName=='我的模块' :                for j in range(0, len(node.childNodes)):                    cnode = node.childNodes[j]                    if cnode.nodeType !=1: continue                    attri = cnode.getAttribute('链接')                    if (attri == '') : continue                    string = GetXMLByLink(attri)                    if string=='' : continue                    tmpnode = CreateNodeByXML(string)                    cnode.appendChild(tmpnode)                    if os.path.exists(string):                        os.remove(string)            EnumNode(node)    if xml == '':        return ''    DOMTree = minidom.parseString(xml)    root = DOMTree.documentElement    EnumNode(root)    Result = root.toxml('utf8')    return Resultdef SortVar(elem):    return len(elem[0])def SetSubject(LPH, childVarstr, Var):    def check(childVarstr):        if childVarstr[len(childVarstr) - 1] == '-' or childVarstr[len(childVarstr) - 1] == '+' or childVarstr[            len(childVarstr) - 1] == '*' or childVarstr[len(childVarstr) - 1] == '/':            childVarstr = childVarstr[0:len(childVarstr) - 1]        return childVarstr    L = float(LPH['L'])    P = float(LPH['P'])    H = float(LPH['H'])    if childVarstr == '' or childVarstr == None:        return 0    if childVarstr.isdigit():        return eval(childVarstr)    if Var == {}:        childVarstr = check(childVarstr)        return eval(childVarstr)    items = list(Var.items())    items.sort(key=SortVar,reverse=True)    for vname, vvalue in items:        if vname=='':            continue        childVarstr = childVarstr.replace(vname,vvalue)    childVarstr=check(childVarstr)    try:        childVarint = eval(childVarstr)    except:        childVarint = GetExpValue(L, P, H, childVarstr)    return childVarintdef Xml2ChildNodes(xml):    if xml =='': return    DOMTree = minidom.parseString(xml)    node = DOMTree.documentElement    return nodedef MyVariant(str1, s1, s2):    s1 = ''    s2 = ''    ws = str1    n = ws.find(':')    s1 = ws[0: n]    s2 = ws[n+1:]    return s1,s2def ReadFile(filename):    Result = ''    try:        with open(filename, 'r') as f:            Result = f.read()    except:        with open(filename, 'r', encoding='utf8') as f:            Result = f.read()    return Resultdef InitSysVariantValue():    global value_lsk, value_rsk, value_zk, value_zs, value_ls, value_lg, value_ltm, value_rtm    value_lsk = 0    value_rsk = 0    value_zk = 0    value_zs = 0    value_ls = 0    value_lg = 0    value_ltm = 0    value_rtm = 0def ImportXomItemForBom(param):    Result = 0    LPH = SetSysLPHValue(param['pl'], param['pd'], param['ph'])    root = param['rootnode']    string = root.getAttribute('类别')    if (string == '趟门,趟门') or (string == '掩门,掩门'):        for k in range(0, root.childNodes.length):  #            node = root.childNodes[k]            if node.nodeType != 1: continue            if node.nodeName == '模板':                cnode = getfirstchild(node)                childxml = ''                if cnode:                    childxml = cnode.toxml('utf8')                if (childxml!='') and (string == '趟门,趟门'):                    tmlist.append(childxml)                if (childxml!='') and (string == '掩门,掩门'):                    ymlist.append(childxml)        return    Var = {}    for i in range(0, root.childNodes.length):        node = root.childNodes[i]        if node.nodeType != 1: continue        if node.nodeName == '变量列表':            for j in range(0, node.childNodes.length):                cnode = node.childNodes[j]                if cnode.nodeType != 1: continue                if cnode.nodeName == '变量':                    vname = cnode.getAttribute('名称')                    value = cnode.getAttribute('值')                    Var = SetSysVariantValue(vname, value, Var)    for i in range(0, root.childNodes.length):        node = root.childNodes[i]        if node.nodeType != 1 : continue        if node.nodeName == '我的模块':            if node.childNodes.length > 0:                for j in range(node.childNodes.length-1,-1,-1):  #                    cnode = node.childNodes[j]                    if cnode.nodeType != 1: continue                    if (cnode.nodeName != '板件') and (cnode.nodeName != '五金') and (                            cnode.nodeName != '型材五金') and (cnode.nodeName != '模块') and (                            cnode.nodeName != '门板'):                        continue                    bg = cnode.getAttribute('基础图形')                    if bg == 'BG::SPACE': continue                    string = cnode.getAttribute('显示方式')                    if (string == '3'):                        node.childNodes.remove(cnode)                        continue                    newpoi = InitBomOrderItem()                    newpoi.guid =cnode.getAttribute('GUID') if cnode.getAttribute('GUID') else cnode.getAttribute('guid')                    newpoi.pl = param['pl']    #上一级的l,p,h                    newpoi.pd = param['pd']                    newpoi.ph = param['ph']                    tmp_subspace = cnode.getAttribute('子空间')                    if tmp_subspace == 'A': tmp_subspace = ''    #子空间                    newpoi.x = int(param['px']) + 0    #上一级的x,y,z                    newpoi.y = int(param['py']) + 0                    newpoi.z = int(param['pz']) + 0                    xx0 = 0                    xx1 = 0                    yy0 = 0                    yy1 = 0                    zz0 = 0                    zz1 = 0                    if cnode.hasAttribute('XX0'):                        xx0 = int(cnode.getAttribute('XX0'))                    if cnode.hasAttribute('XX1'):                        xx1 = int(cnode.getAttribute('XX1'))                    if cnode.hasAttribute('YY0'):                        yy0 = int(cnode.getAttribute('YY0'))                    if cnode.hasAttribute('YY1'):                        yy1 = int(cnode.getAttribute('YY1'))                    if cnode.hasAttribute('ZZ0'):                        zz0 = int(cnode.getAttribute('ZZ0'))                    if cnode.hasAttribute('ZZ1'):                        zz1 = int(cnode.getAttribute('ZZ1'))                    varstr = ''                    if cnode.hasAttribute('X'):                        varstr = cnode.getAttribute('X')                    ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))                    newpoi.lx = ToValueInt + xx0                    newpoi.x = int(param['px']) + newpoi.lx                    varstr = ''                    if cnode.hasAttribute('Y'):                        varstr = cnode.getAttribute('Y')                    ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))                    newpoi.ly = ToValueInt + yy0                    newpoi.y = int(param['py']) + newpoi.ly                    varstr = ''                    if cnode.hasAttribute('Z'):                        varstr = cnode.getAttribute('Z')                    ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))                    newpoi.lz = ToValueInt + zz0                    newpoi.z = int(param['pz']) + newpoi.lz                    newpoi.ox = 0                    if cnode.getAttribute('OX') != '':                        newpoi.ox = float(cnode.getAttribute('OX'))                    newpoi.oy = 0                    if cnode.getAttribute('OY') != '':                        newpoi.oy = float(cnode.getAttribute('OY'))                    newpoi.oz = 0                    if cnode.getAttribute('OZ') != '':                        newpoi.oz = float(cnode.getAttribute('OZ'))                    varstr = ''                    if cnode.hasAttribute('宽'):                        varstr = cnode.getAttribute('宽')                    ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))                    newpoi.l = int(ToValueInt) + int(xx1) + (0 - int(xx0))                    varstr = ''                    if cnode.hasAttribute('深'):                        varstr = cnode.getAttribute('深')                    ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))                    newpoi.p = ToValueInt + int(yy1) + (0 - int(yy0))                    varstr = ''                    if cnode.hasAttribute('高'):                        varstr = cnode.getAttribute('高')                    ToValueInt = int(Delphi_Round(SetSubject(LPH, varstr, Var)))                    newpoi.h = ToValueInt + int(zz1) + (0 - int(zz0))                    # 所有16个参数                    args = [0] * 16                    for k in range(0, 16):                        args[k] = 0                        string = ''                        if cnode.hasAttribute(('参数' + str(k))):                            string = cnode.getAttribute(('参数' + str(k)))                        if (string != ''):                            vname = ''                            value = ''                            vname, value = MyVariant(string, vname, value)                            ToValueInt = int(SetSubject(LPH, value, Var))                            args[k] = ToValueInt                            newpoi.var_args[k] = args[k]                            newpoi.var_names[k] = vname                            varstr = varstr + '+' + vname                    # size高级编程                    program_str = ''                    if cnode.hasAttribute('Program'):                        program_str = cnode.getAttribute('Program')                    # size高级编程                    if cnode.hasAttribute('SizeProgram'):                        SpStr = cnode.getAttribute('SizeProgram')                        LUAFILE = RootPath + '\\Program\\'+ SpStr                        if os.path.exists(LUAFILE):                            luaobj[SpStr] = ReadFile(LUAFILE)                            obj = {'X': newpoi.x,  # X                                   'Y': newpoi.y,  # Y                                   'Z': newpoi.z,  # Z                                   'L': newpoi.l,  # 宽                                   'D': newpoi.p,  # 深                                   'H': newpoi.h,  # 高                                   'OZ': newpoi.oz,  # OZ旋转                                   }                            for i in range(16):                                obj['C' + str(i)] = newpoi.var_args[i]                            SizeProgramStr = CompileLuaProgram(obj, LUAFILE)                            if SizeProgramStr != '':                                SizeProgramStr = SizeProgramStr[1:len(SizeProgramStr) - 1]                                Sizeprogramstrlist = SizeProgramStr.split(',')                                Sizeattridict = {}                                for Sizeprogramstrlistchild in Sizeprogramstrlist:                                    Sizeattrilist = Sizeprogramstrlistchild.split(':')                                    Sizeattridict[Sizeattrilist[0]] = Sizeattrilist[1]                                if 'X' in Sizeattridict:                                    newpoi.x = int(Sizeattridict['X'])                                if 'Y' in Sizeattridict:                                    newpoi.y = int(Sizeattridict['Y'])                                if 'Z' in Sizeattridict:                                    newpoi.z = int(Sizeattridict['Z'])                                if 'L' in Sizeattridict:                                    newpoi.l = int(Sizeattridict['L'])                                if 'D' in Sizeattridict:                                    newpoi.p = int(Sizeattridict['D'])                                if 'H' in Sizeattridict:                                    newpoi.h = int(Sizeattridict['H'])                                if 'OZ' in Sizeattridict:                                    newpoi.oz = float(Sizeattridict['OZ'])                        else:                            Error.error(LUAFILE+', not exist!!!')                    if cnode.hasAttribute('类别'):                        newpoi.desc = cnode.getAttribute('类别')                    Result = Result + 1                    real_l = newpoi.l                    real_d = newpoi.p                    if newpoi.oz == '0':                        newpoi.oz = 0                    if (tmp_subspace == 'L'):  # // L面空间，进行旋转计算                        if (newpoi.var_args[0] == 1):                            newpoi.oz = arctan((real_d - newpoi.var_args[2]) / (                                    real_l - newpoi.var_args[1])) / pi * 180  # // 旋转角度                            newpoi.p = newpoi.var_args[3]  # // 深度                            t = sqrt((real_l - newpoi.var_args[1]) * (real_l - newpoi.var_args[1]) + (                                    real_d - newpoi.var_args[2]) * (                                             real_d - newpoi.var_args[2]))                            newpoi.l = Delphi_Round(t)  # // 宽度                            newpoi.x = Delphi_Round(newpoi.var_args[1] - newpoi.var_args[3] * (                                    real_d - newpoi.var_args[2]) / t)  # // x                            newpoi.y = Delphi_Round(                                real_d - newpoi.var_args[3] * (real_l - newpoi.var_args[1]) / t)  # ; // y                            if newpoi.var_args[4] != 0: newpoi.l = newpoi.var_args[4]                            newpoi.lx = newpoi.x                            newpoi.ly = newpoi.y                        else:                            newpoi.oz = 0                    if (tmp_subspace == 'R'):  # // R面空间，进行旋转计算                        if (newpoi.var_args[0] == 1):                            newpoi.oz = -arctan(                                (real_d - newpoi.var_args[2]) / (                                        real_l - newpoi.var_args[1])) / pi * 180  # // 旋转角度                            newpoi.p = newpoi.var_args[3]  # // 深度                            t = sqrt((real_l - newpoi.var_args[1]) * (real_l - newpoi.var_args[1]) + (                                    real_d - newpoi.var_args[2]) * (                                             real_d - newpoi.var_args[2]))                            newpoi.l = Delphi_Round(t)  # // 宽度                            newpoi.x = newpoi.x + round(newpoi.var_args[3] * (                                    real_d - newpoi.var_args[1]) / t)  # // x                            newpoi.y = Delphi_Round(newpoi.var_args[2] - newpoi.var_args[3] * (                                    real_l - newpoi.var_args[1]) / t)  # ; // y                            if newpoi.var_args[4] != 0: newpoi.l = newpoi.var_args[4]                            newpoi.lx = newpoi.x                            newpoi.ly = newpoi.y                        else:                            newpoi.oz = 0                    childxml = ''                    firstchild = getfirstchild(cnode)                    if firstchild:                        childxml = firstchild.toxml('UTF-8')                    if childxml != '':                        param2 = {}                        for key, value in param.items():                            param2[key] = value                        param2['pl'] = newpoi.l                        param2['pd'] = newpoi.p                        param2['ph'] = newpoi.h                        param2['px'] = newpoi.x                        param2['py'] = newpoi.y                        param2['pz'] = newpoi.z                        param2['num'] = newpoi.num                        param2['parent'] = newpoi                        if cnode.hasAttribute('输出类型'):                            param2['outputtype'] = cnode.getAttribute('输出类型')                        child = getfirstchild(cnode)                        if child:                            param2['rootnode'] = child                            param2['xdoc'] = param['xdoc']                            childnum = ImportXomItemForBom(param2)                    if program_str:                        LUAFILE = RootPath + '\\Program\\' + program_str                        if os.path.exists(LUAFILE):                            luaobj[program_str] = ReadFile(LUAFILE)                            clonechildnum = ImportCloneItemForBom(Var, program_str, newpoi, cnode, param)                        else:                            Error.error(LUAFILE + ', not exist!!!')    return Resultdef InitData(rootname):    global mSlidingExpList, mSlidingTypeList, mSlidingParamList, mUDBoxParamList, \    mTrackParamList, mHBoxParamList, PanelTypeList, mSlidingColorList, \    mSlidingColorClassList, mSlidingWjBomDetailList, mSSExpList, \    mSlidingAccessoryList, mVBoxParamList, mPanelBomDetailList, \    UHBoxParam, HHBoxParam, Cfgobj2, Cfgobj3, Cfgobj4, SHBoxParam, \    HCfgobj2, HCfgobj3, HCfgobj4, HSHBoxParam, cfglist, \    mExpList, mHandleList, mDoorHBoxParamList, mHingeList,\    mCurHingeList, mDoorPanelBomDetailList , mDoorPanelTypeList,\    mParamList, mShutterExpList,\    mWJBomList, mWJBomDetailList, mDoorXMLList, mAccessoryList,\    mColorList, mColorClassList, mColorClass2List, mTypeList    '''    :param rootname: 数据库id    :return:    趟门对象25：    mSlidingExpList\ mSlidingTypeList \ mSlidingParamList \ mUDBoxParamList    mTrackParamList \ mHBoxParamList \ PanelTypeList \ mSlidingColorList    mSlidingColorClassList \ mSlidingWjBomDetailList \ mSSExpList    mSlidingAccessoryList \ mVBoxParamList \ mPanelBomDetailList    UHBoxParam\ HHBoxParam \ Cfgobj2 \ Cfgobj3 \Cfgobj4 \ SHBoxParam    HCfgobj2 \ HCfgobj3 \ HCfgobj4 \ HSHBoxParam \ cfglist    掩门对象17：    mExpList\ mHandleList\ mDoorHBoxParamList\ mHingeList    mCurHingeList \mDoorPanelBomDetailList \ mDoorPanelTypeList \    mParamList\ mShutterExpList\    mWJBomList\ mWJBomDetailList\ mDoorXMLList\ mAccessoryList\    mColorList\ mColorClassList\ mColorClass2List\ mTypeList\    '''    #adb = db.DB()    #adb.open(RootPath+'\\SlidADoorDBD', dbtype=db.DB_HASH, flags=db.DB_CREATE)    # 趟门    #(rootname)    mSlidingExpListcontent = r.get((rootname + 'mSlidingExpList').encode('utf8'))    mSlidingTypeListcontent = r.get((rootname + 'mSlidingTypeList').encode('utf8'))    SlidingParamcontent = r.get((rootname + 'mSlidingParamList').encode('utf8'))    UDBoxParamcontent = r.get((rootname + 'mUDBoxParamList').encode('utf8'))    TrackParamcontent = r.get((rootname + 'mTrackParamList').encode('utf8'))    HBoxParamcontent = r.get((rootname + 'mHBoxParamList').encode('utf8'))    PanelTypeListcontent = r.get((rootname + 'PanelTypeList').encode('utf8'))    mSlidingColorListcontent = r.get((rootname + 'mSlidingColorList').encode('utf8'))    mSlidingColorClassListcontent = r.get((rootname + 'mSlidingColorClassList').encode('utf8'))    mSlidingWjBomDetailListcontent = r.get((rootname + 'mSlidingWjBomDetailList').encode('utf8'))    mSSExpListcontent = r.get((rootname + 'mSSExpList').encode('utf8'))    mSlidingAccessoryListcontent = r.get((rootname + 'mSlidingAccessoryList').encode('utf8'))    mVBoxParamListcontent = r.get((rootname + 'mVBoxParamList').encode('utf8'))    mPanelBomDetailListcontent = r.get((rootname + 'mPanelBomDetailList').encode('utf8'))    UHBoxParamcontent = r.get((rootname + 'UHBoxParam').encode('utf8'))    UHBoxParamcontent = r.get((rootname + 'UHBoxParam').encode('utf8'))    HHBoxParamcontent = r.get((rootname + 'HHBoxParam').encode('utf8'))    Cfgobj2content = r.get((rootname + 'Cfgobj2').encode('utf8'))    Cfgobj3content = r.get((rootname + 'Cfgobj3').encode('utf8'))    Cfgobj4content = r.get((rootname + 'Cfgobj4').encode('utf8'))    SHBoxParamcontent = r.get((rootname + 'SHBoxParam').encode('utf8'))    HCfgobj2content = r.get((rootname + 'HCfgobj2').encode('utf8'))    HCfgobj3content = r.get((rootname + 'HCfgobj3').encode('utf8'))    HCfgobj4content = r.get((rootname + 'HCfgobj4').encode('utf8'))    HSHBoxParamcontent = r.get((rootname + 'HSHBoxParam').encode('utf8'))    cfglistcontent = r.get((rootname + 'cfglist').encode('utf8'))    mSlidingExpList = json.loads(mSlidingExpListcontent, encoding='gbk')    mSlidingTypeList = json.loads(mSlidingTypeListcontent, encoding='gbk')    mSlidingParamList = json.loads(SlidingParamcontent, encoding='gbk')    mUDBoxParamList = json.loads(UDBoxParamcontent, encoding='gbk')    mTrackParamList = json.loads(TrackParamcontent, encoding='gbk')    #('mTrackParamList=',mTrackParamList)    mHBoxParamList = json.loads(HBoxParamcontent, encoding='gbk')    PanelTypeList = json.loads(PanelTypeListcontent, encoding='gbk')    mSlidingColorList = json.loads(mSlidingColorListcontent, encoding='gbk')    mSlidingColorClassList = json.loads(mSlidingColorClassListcontent, encoding='gbk')    mSlidingWjBomDetailList = json.loads(mSlidingWjBomDetailListcontent, encoding='gbk')    mSSExpList = json.loads(mSSExpListcontent, encoding='gbk')    mSlidingAccessoryList = json.loads(mSlidingAccessoryListcontent, encoding='gbk')    mVBoxParamList = json.loads(mVBoxParamListcontent, encoding='gbk')    mPanelBomDetailList = json.loads(mPanelBomDetailListcontent, encoding='gbk')    UHBoxParam = json.loads(UHBoxParamcontent, encoding='gbk')    HHBoxParam = json.loads(HHBoxParamcontent, encoding='gbk')    Cfgobj2 = json.loads(Cfgobj2content, encoding='gbk')    Cfgobj3 = json.loads(Cfgobj3content, encoding='gbk')    Cfgobj4 = json.loads(Cfgobj4content, encoding='gbk')    SHBoxParam = json.loads(SHBoxParamcontent, encoding='gbk')    HCfgobj2 = json.loads(HCfgobj2content, encoding='gbk')    HCfgobj3 = json.loads(HCfgobj3content, encoding='gbk')    HCfgobj4 = json.loads(HCfgobj4content, encoding='gbk')    HSHBoxParam = json.loads(HSHBoxParamcontent, encoding='gbk')    cfglist = json.loads(cfglistcontent, encoding='gbk')    sSort(Cfgobj2)    sSort(Cfgobj3)    sSort(Cfgobj4)    sSort(HCfgobj2)    sSort(HCfgobj3)    sSort(HCfgobj4)    # 掩门    mExpListcontent = r.get((rootname + 'mExpList').encode('utf8'))    mHandleListcontent = r.get((rootname + 'mHandleList').encode('utf8'))    mDoorHBoxParamListcontent = r.get((rootname + 'mDoorHBoxParamList').encode('utf8'))    mHingeListcontent = r.get((rootname + 'mHingeList').encode('utf8'))    mCurHingeListcontent = r.get((rootname + 'mCurHingeList').encode('utf8'))    mDoorPanelBomDetailListcontent = r.get((rootname + 'mDoorPanelBomDetailList').encode('utf8'))    mDoorPanelTypeListcontent = r.get((rootname + 'mDoorPanelTypeList').encode('utf8'))    mParamListcontent = r.get((rootname + 'mParamList').encode('utf8'))    mShutterExpListcontent = r.get((rootname + 'mShutterExpList').encode('utf8'))    mWJBomListcontent = r.get((rootname + 'mWJBomList').encode('utf8'))    mWJBomDetailListcontent = r.get((rootname + 'mWJBomDetailList').encode('utf8'))    mDoorXMLListcontent = r.get((rootname + 'mDoorXMLList').encode('utf8'))    mAccessoryListcontent = r.get((rootname + 'mAccessoryList').encode('utf8'))    mColorListcontent = r.get((rootname + 'mColorList').encode('utf8'))    mColorClassListcontent = r.get((rootname + 'mColorClassList').encode('utf8'))    mColorClass2Listcontent = r.get((rootname + 'mColorClass2List').encode('utf8'))    mTypeListcontent = r.get((rootname + 'mTypeList').encode('utf8'))    mExpList = json.loads(mExpListcontent, encoding='gbk')    mHandleList = json.loads(mHandleListcontent, encoding='gbk')    mDoorHBoxParamList = json.loads(mDoorHBoxParamListcontent, encoding='gbk')    mHingeList = json.loads(mHingeListcontent, encoding='gbk')    mCurHingeList = json.loads(mCurHingeListcontent, encoding='gbk')    mDoorPanelBomDetailList = json.loads(mDoorPanelBomDetailListcontent, encoding='gbk')    mDoorPanelTypeList = json.loads(mDoorPanelTypeListcontent, encoding='gbk')    mParamList = json.loads(mParamListcontent, encoding='gbk')    mShutterExpList = json.loads(mShutterExpListcontent, encoding='gbk')    mWJBomList = json.loads(mWJBomListcontent, encoding='gbk')    mWJBomDetailList = json.loads(mWJBomDetailListcontent, encoding='gbk')    mDoorXMLList = json.loads(mDoorXMLListcontent, encoding='gbk')    mAccessoryList = json.loads(mAccessoryListcontent, encoding='gbk')    mColorList = json.loads(mColorListcontent, encoding='gbk')    mColorClassList = json.loads(mColorClassListcontent, encoding='gbk')    mColorClass2List = json.loads(mColorClass2Listcontent, encoding='gbk')    mTypeList = json.loads(mTypeListcontent, encoding='gbk')    # 以上是掩门的def LoadXML2Bom(xmlfile, myversion, Path):    global config, RootPath, luaobj, tmlist, ymlist    RootPath = Path    #工厂数据根目录    config = {        'ymconfig': {            'mExpList': [],            'mTypeList': [],            'mParamList': [],            'mHandleList': [],            'mHingeList': [],            'mCurHingeList': [],            'mDoorHBoxParamList': [],            'mDoorPanelTypeList': [],            'mAccessoryList': [],            'mColorClassList': [],            'mColorClass2List': [],            'mShutterExpList': [],            'mWJBomList': [],            'mWJBomDetailList': [],            'mDoorPanelBomDetailList': [],            'mDoorXMLList': []        },        'tmconfig': {            'SlidingExp': [],  # 1.单门数量类型            'SlidingType': [],  # 2.门类型            'SlidingParam': [],  # 3.边框类型            'UDBoxParam': [],  # 4.上下横框类型            'TrackParam': [],  # 5.趟门上下轨参数            'HBoxParam': [],  # 6.趟门中横框            'VBoxParam': [],  # 7.竖框参数            'SlidingColor': [],  # 8.颜色分类2            'PanelType': [],  # 9.门板类型            'SlidingAccessory': [],  # 10.五金配件            'SlidingColorClass': [],  # 11.颜色分类            'SSExp': [],  # 12.百叶板计算公式            'SlidingWjBomDetail': [],  # 13.五金配件分类数据            'PanelBomDetail': [],  # 14.门板附加物料            'Cfglist': [],  # 15.门转换表            'Hfg2': [],  # 16.趟门2横分格            'Hfg3': [],  # 17.趟门3横分格            'Hfg4': [],  # 18.趟门4横分格            'Sfg2': [],  # 19.趟门2竖分格            'Sfg3': [],  # 20.趟门3竖分格            'Sfg4': [],  # 21.趟门4竖分格            'HSHBoxParam': [],  # 22.横中横 HSHBoxParam            'SHBoxParam': [],  # 23.竖中横 SHBoxParam            'SfgParam': {},  # 24 xml        },        'gtconfig':{            'qdsoft_id':'data',            'UrlIp':'http://129.204.134.85:8002/Qdbom'        }    }     #返回的趟门掩门配置数据    tmlist = []    #趟门列表    ymlist = []    #掩门列表    luaobj = {}    #高级编程配置数据    InitData(myversion)    #加载趟门掩门所有配置数据    DOMTree = minidom.parse(xmlfile)    root = DOMTree.documentElement    node = getfirstchild(root)    # 高级编程    bh = 18    InitSysVariantValue()    if node.nodeName == '产品':        string = (node.getAttribute('板材厚度'))        if string: bh = int(string)    l = 0    d = 0    h = 0    if root.hasAttribute('宽') :        l = int(root.getAttribute('宽'))    if root.hasAttribute('深') :        d = int(root.getAttribute('深'))    if root.hasAttribute('高') :        h = int(root.getAttribute('高'))    param = {}    param['pl'] = l    param['pd'] = d    param['ph'] = h    param['px'] = 0    param['py'] = 0    param['pz'] = 0    param['boardheight'] = bh    param['rootnode'] = node    param['xdoc'] = DOMTree    try:       ImportXomItemForBom(param)    #计算订单    except Exception as e:        Error.error(RootPath+','+str(e))    INFO.info(RootPath+',  luaobj='+ str(luaobj.keys()))    config['gtconfig']['luaobj'] = luaobj    for tmchildxml in tmlist:        gettmconfig(myversion, tmchildxml)    for ymchildxml in ymlist:        getymconfig(myversion, ymchildxml)    config['tmconfig']['Cfglist'] = cfglist    config['result'] = 1    configjson = json.dumps(config, ensure_ascii=False).encode('utf8')    with open('config.txt', 'w', encoding='utf8') as f:        f.write(json.dumps(config, ensure_ascii=False))    return configjsonif __name__ == '__main__':    Sliding = {        'Sfg_Param': {'HTxml': '<产品 名称="横2格门" 类别="" 摆放方式="整块;左右延伸:-1;'                               '前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;'                               '" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" '                               'ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表>'                               '</变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" '                               'Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" '                               '基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" '                               'HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" '                               'OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" '                               'Y="0" Z="0" 宽="L" 深="$竖中横厚度" 高="$竖中横宽度" 类别="" '                               '基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" '                               'Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/>'                               '<板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" '                               'Z="0" 宽="L-$门芯1宽度-$竖中横宽度+2*$竖中横进槽" 深="$门芯2厚度" 高="H" '                               '类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" '                               'Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/></我的模块>'                               '<我的规格><规格 名称="竖2格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',                      'Txml': '<产品 名称="竖2格门" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;'                              '上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" '                              '颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" '                              'LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块>'                              '<板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" '                              '深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" '                              'MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" '                              'OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" '                              '宽="$竖中横宽度" 深="$竖中横宽度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" '                              'MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" '                              'guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" '                              'Z="0" 宽="L-$门芯1宽度-$竖中横宽度+2*$竖中横进槽" 深="$门芯2厚度" 高="H" 类别="" '                              '基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" '                              'ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/></我的模块><我的规格><规格 '                              '名称="竖2格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',                      'Sxml': '<产品 名称="竖3格门_两边均分" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横宽度+$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" Y="$门芯3前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/></我的模块><我的规格><规格 名称="竖3格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',                      'Fxml': '<产品 名称="竖4格门_改123" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="4" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="$门芯1宽度+$门芯2宽度+$竖中横宽度-3*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="4" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="$门芯1宽度+$门芯2宽度+2*$竖中横宽度-4*$竖中横进槽" Y="$门芯3前偏移" Z="0" 宽="$门芯3宽度" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/><板件 名称="竖中横3" X="$门芯1宽度+$门芯2宽度+$门芯3宽度+2*$竖中横宽度-5*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="4" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="6"/><板件 名称="门芯4" X="L-(L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽)" Y="$门芯4前偏移" Z="0" 宽="L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽" 深="$门芯4厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="7"/></我的模块><我的规格><规格 名称="竖3格门" 宽="900" 深="20" 高="1000"/></我的规格></产品>',                      'HSxml': '<产品 名称="横3格门_两边均分" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2-$竖中横宽度+$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="L-(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" Y="$门芯3前偏移" Z="0" 宽="(L-$门芯2宽度-2*$竖中横宽度+4*$竖中横进槽)/2" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="1" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/></我的模块><我的规格><规格 名称="竖3格门" 宽="800" 深="20" 高="1000"/></我的规格></产品>',                      'HFxml': '<产品 名称="横4格门_改123" 类别="" 摆放方式="整块;左右延伸:-1;前后延伸:-1;上下延伸:-1;尺寸限制:1,1220,1,1220,1,2430;" 装饰类别="趟门" 材料="" 颜色="" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" LgwjFlag="0"><摆放规则列表/><变量列表></变量列表><我的模块><板件 名称="门芯1" X="0" Y="$门芯1前偏移" Z="0" 宽="$门芯1宽度" 深="$门芯1厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="1"/><板件 名称="竖中横1" X="$门芯1宽度-$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="2"/><板件 名称="门芯2" X="$门芯1宽度+$竖中横宽度-2*$竖中横进槽" Y="$门芯2前偏移" Z="0" 宽="$门芯2宽度" 深="$门芯2厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="3"/><板件 名称="竖中横2" X="$门芯1宽度+$门芯2宽度+$竖中横宽度-3*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="4"/><板件 名称="门芯3" X="$门芯1宽度+$门芯2宽度+2*$竖中横宽度-4*$竖中横进槽" Y="$门芯3前偏移" Z="0" 宽="$门芯3宽度" 深="$门芯3厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="5"/><板件 名称="竖中横3" X="$门芯1宽度+$门芯2宽度+$门芯3宽度+2*$竖中横宽度-5*$竖中横进槽" Y="0" Z="0" 宽="$竖中横宽度" 深="$竖中横厚度" 高="H" 类别="" 基础图形="BG_竖中横" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="6"/><板件 名称="门芯4" X="L-(L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽)" Y="$门芯4前偏移" Z="0" 宽="L-$门芯1宽度-$门芯2宽度-$门芯3宽度-3*$竖中横宽度+6*$竖中横进槽" 深="$门芯4厚度" 高="H" 类别="" 基础图形="BG::RECT" 装饰类别="趟门" MATID="" DI="3" HoleFlag="0" Flag32="0" ErrorFlag="0" ActFlag="0" OZ="" 图形参数="" guid="7"/></我的模块><我的规格><规格 名称="竖3格门" 宽="900" 深="20" 高="1000"/></我的规格></产品>'                      },    }    config = {                'ymconfig':{                    'mExPList':[],                    'mTypeList':[],                    'mParamList':[],                    'mHandleList':[],                    'mHingeList':[],                    'mDoorHBoxParamList':[],                    'mDoorPanelTypeList':[],                    'mAccessoryList':[],                    'mColorClassList':[],                    'mColorClass2List':[],                    'mShutterExpList':[],                    'mWJBomList':[],                    'mWJBomDetailList':[],                    'mDoorPanelBomDetailList':[],                    'mDoorXMLList':[]                            },                'tmconfig':{                    'SlidingExp':[],  #1.单门数量类型                    'SlidingType':[], #2.门类型                    'SlidingParam':[], #3.边框类型                    'UDBoxParam':[],#  4.上下横框类型                    'TrackParam':[],    #5.趟门上下轨参数                    'HBoxParam':[],    #6.趟门中横框                    'VBoxParam':[],    #7.竖框参数                    'SlidingColor':[],    #8.颜色分类2                    'PanelType':[],    #9.门板类型                    'SlidingAccessory':[],    #10.五金配件                    'SlidingColorClass':[],    #11.颜色分类                    'SSExp':[],    #12.百叶板计算公式                    'SlidingWjBomDetail':[],    #13.五金配件分类数据                    'PanelBomDetail':[],    #14.门板附加物料                    'Cfglist':[],    #15.门转换表                    'Hfg2':[],    #16.趟门2横分格                    'Hfg3':[],    #17.趟门3横分格                    'Hfg4': [],  # 18.趟门4横分格                    'Sfg2': [],  # 19.趟门2竖分格                    'Sfg3': [],  # 20.趟门3竖分格                    'Sfg4': [],  # 21.趟门4竖分格                    'HSHBoxParam': [],  # 22.横中横 HSHBoxParam                    'SHBoxParam': [],  # 23.竖中横 SHBoxParam                    'SfgParam':{},    #24 xml                },              }    # adb = db.DB()    # adb.open('db_filename', dbtype=db.DB_HASH, flags=db.DB_CREATE)    # for i, w in enumerate('some word for example'.split()):    #     adb.put(w.encode('utf8'), str(i))    #    # for key, data in irecords(adb.cursor()):    #     #(1,key, data)    # adb.close()    #    # the_same_db = db.DB()    # the_same_db.open("db_filename")    # the_same_db.put('skidoo'.encode('utf8'), '23')  # 加入数据库    # the_same_db.put('for'.encode('utf8'), 'change the data')  # 改变数据库的数据    # for key, data in irecords(the_same_db.cursor()):    #     #(key, data)    # the_same_db.close()    mDoorsList = []    mGridItem = 0 #均分    base_dir = os.path.abspath(os.path.join(os.getcwd(),'..'))    #('2=',base_dir)    #path = 'D:\\HGSoftware\\001_美蝶设计软件工厂版190807\\Python3\\TestPython\\ord\\20030402\\8610AD406B7871C399AAE312114FA076.xml'    path = 'D:\\HGSoftware\\001_美蝶设计软件工厂版190807\\Python3\\TestPython\\ord\\20030901\\D673648A85D4A155DCCFDA209699A31E.xml'    #path ='D:\\nginx-1.0.11\\nginx-1.0.11\\html\\data\\Python\\UpLoadXml\\#order_scene0_space30BB2B1351B9219B63112944FB2FA9E1.xml'    #path = 'D:\\HGSoftware\\001_美蝶设计软件工厂版190807\\Python3\\TestPython\\ord\\K10008220466190523001\\#order_scene0_space3420F65812518FAE670B179D73A6CBD8'    #path = 'extradata.xml'    LoadXML2Bom(path, '0100.01', "D:\\HGSoftware\\nginx-1.0.11\\nginx-1.0.11\\html\\ServerData\\010")    # for pwjbomdetail in mWJBomDetailList:    #     Add2Config('mWJBomDetailList', pwjbomdetail)  # 五金配件分类数据.cfg    # for pa in mAccessoryList:    #     Add2Config('mAccessoryList', pa)  # 五金配件.cfg    # for ppbdetail in mDoorPanelBomDetailList:    #     Add2Config('mDoorPanelBomDetailList', ppbdetail)  # 门芯附加物料.cfg    #for key, value in config['ymconfig'].items():        #_logging.debug(key + ',' +str(len(value)))    ##(json.dumps(config,encoding='utf8',ensure_ascii=False).encode('utf8'))